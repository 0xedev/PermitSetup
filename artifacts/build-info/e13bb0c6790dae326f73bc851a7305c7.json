{
	"id": "e13bb0c6790dae326f73bc851a7305c7",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"PermitInvestre.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title PermitAutoBuyContract\n * @dev Contract that accepts EIP-2612 permits and executes swaps atomically\n * \n * Users grant permits to this contract, then the contract:\n * 1. Uses permit to transfer USDC from user\n * 2. Approves DEX router for USDC spending\n * 3. Executes swap via router\n * 4. Sends received tokens directly to user\n * \n * This eliminates the need for backend wallet to hold user funds\n */\ncontract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {\n    \n    IERC20 public immutable usdc;\n    \n    // Trusted DEX routers\n    address public constant KYBERSWAP_ROUTER = 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5;\n    \n    // User daily spending tracking\n    mapping(address => mapping(uint256 => uint256)) public dailySpent; // user => day => amount\n    mapping(address => uint256) public userDailyLimit;\n    mapping(address => uint256) public likeAmount;\n    mapping(address => uint256) public recastAmount;\n    \n    // Events\n    event PermitAutoBuyExecuted(\n        address indexed user,\n        address indexed tokenOut,\n        uint256 usdcAmount,\n        uint256 tokensReceived,\n        string actionType\n    );\n    \n    event UserLimitsSet(\n        address indexed user,\n        uint256 dailyLimit,\n        uint256 likeAmount,\n        uint256 recastAmount\n    );\n    \n    constructor(address _usdc, address owner) Ownable(owner) {\n        usdc = IERC20(_usdc);\n    }\n    \n    /**\n     * @dev Execute auto-buy using EIP-2612 permit\n     * @param user User's wallet address\n     * @param usdcAmount Amount of USDC to spend\n     * @param deadline Permit deadline\n     * @param v,r,s Permit signature components\n     * @param swapData Encoded swap transaction data for DEX router\n     * @param actionType \"like\" or \"recast\"\n     */\n    function executePermitAutoBuy(\n        address user,\n        uint256 usdcAmount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes calldata swapData,\n        string calldata actionType\n    ) external onlyOwner whenNotPaused nonReentrant {\n        \n        // Validate action type and amount limits\n        uint256 today = block.timestamp / 86400; // days since epoch\n        uint256 maxAmount;\n        \n        bytes32 actionHash = keccak256(bytes(actionType));\n        if (actionHash == keccak256(bytes(\"like\"))) {\n            require(likeAmount[user] > 0, \"Like amount not set\");\n            maxAmount = likeAmount[user];\n        } else if (actionHash == keccak256(bytes(\"recast\"))) {\n            require(recastAmount[user] > 0, \"Recast amount not set\");\n            maxAmount = recastAmount[user];\n        } else {\n            revert(\"Invalid action type\");\n        }\n        \n        require(usdcAmount <= maxAmount, \"Amount exceeds action limit\");\n        \n        // Check daily limit\n        uint256 limit = userDailyLimit[user];\n        require(limit > 0, \"Daily limit not set\");\n        require(dailySpent[user][today] + usdcAmount <= limit, \"Daily limit exceeded\");\n        \n        // Execute permit to allow this contract to spend user's USDC\n        IERC20Permit(address(usdc)).permit(\n            user,\n            address(this),\n            usdcAmount,\n            deadline,\n            v,\n            r,\n            s\n        );\n        \n        // Transfer USDC from user to this contract\n        require(\n            usdc.transferFrom(user, address(this), usdcAmount),\n            \"USDC transfer failed\"\n        );\n        \n        // Approve router to spend USDC\n        require(\n            usdc.approve(KYBERSWAP_ROUTER, usdcAmount),\n            \"Router approval failed\"\n        );\n        \n        // Execute swap via router\n        (bool success, bytes memory result) = KYBERSWAP_ROUTER.call(swapData);\n        require(success, string(result));\n        \n        // Update daily spending\n        dailySpent[user][today] += usdcAmount;\n        \n        // Note: Tokens are sent directly to user by the DEX router\n        // We don't know the exact amount received, but that's tracked off-chain\n        \n        emit PermitAutoBuyExecuted(\n            user,\n            address(0), // We don't know the output token address from swapData\n            usdcAmount,\n            0, // We don't know exact tokens received\n            actionType\n        );\n    }\n    \n    /**\n     * @dev Set user limits and amounts\n     */\n    function setUserLimits(\n        address user,\n        uint256 dailyLimit,\n        uint256 _likeAmount,\n        uint256 _recastAmount\n    ) external onlyOwner {\n        userDailyLimit[user] = dailyLimit;\n        likeAmount[user] = _likeAmount;\n        recastAmount[user] = _recastAmount;\n        \n        emit UserLimitsSet(user, dailyLimit, _likeAmount, _recastAmount);\n    }\n    \n    /**\n     * @dev Get current daily spent amount\n     */\n    function getDailySpent(address user) external view returns (uint256) {\n        uint256 today = block.timestamp / 86400;\n        return dailySpent[user][today];\n    }\n    \n    /**\n     * @dev Emergency functions\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    /**\n     * @dev Emergency token recovery\n     */\n    function emergencyRecovery(address token, uint256 amount) external onlyOwner {\n        IERC20(token).transfer(owner(), amount);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x2fa0657dd7b8bc75475a47f64bc04a9adb42236b15d65e6781594ea69a46c3e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7496f42681aed94bf0142a077324e50b86046610c1724e7c12e96cf1c365914a\",\"dweb:/ipfs/QmZvhNdSAAbN4PKPdheAqwpXukUiXp3Q3TdQccDMg2NDTV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9d6f6f6600a2bec622f699081b58350873b5e63ce05464d17d674a290bb8a7c\",\"dweb:/ipfs/QmQKVzSQY1PM3Bid4QhgVVZyx6B4Jx7XgaQzLKHj38vJz8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 300,
								"contract": "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"errors": {
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 410,
								"contract": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"PermitInvestre.sol": {
				"PermitAutoBuyContract": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_usdc",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "usdcAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokensReceived",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "actionType",
									"type": "string"
								}
							],
							"name": "PermitAutoBuyExecuted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "dailyLimit",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "likeAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "recastAmount",
									"type": "uint256"
								}
							],
							"name": "UserLimitsSet",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "KYBERSWAP_ROUTER",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "dailySpent",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "emergencyRecovery",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "usdcAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "swapData",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "actionType",
									"type": "string"
								}
							],
							"name": "executePermitAutoBuy",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getDailySpent",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "likeAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "recastAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "dailyLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_likeAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_recastAmount",
									"type": "uint256"
								}
							],
							"name": "setUserLimits",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "usdc",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "userDailyLimit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract that accepts EIP-2612 permits and executes swaps atomically  Users grant permits to this contract, then the contract: 1. Uses permit to transfer USDC from user 2. Approves DEX router for USDC spending 3. Executes swap via router 4. Sends received tokens directly to user  This eliminates the need for backend wallet to hold user funds",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							],
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"emergencyRecovery(address,uint256)": {
								"details": "Emergency token recovery"
							},
							"executePermitAutoBuy(address,uint256,uint256,uint8,bytes32,bytes32,bytes,string)": {
								"details": "Execute auto-buy using EIP-2612 permit",
								"params": {
									"actionType": "\"like\" or \"recast\"",
									"deadline": "Permit deadline",
									"swapData": "Encoded swap transaction data for DEX router",
									"usdcAmount": "Amount of USDC to spend",
									"user": "User's wallet address",
									"v": ",r,s Permit signature components"
								}
							},
							"getDailySpent(address)": {
								"details": "Get current daily spent amount"
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"pause()": {
								"details": "Emergency functions"
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"setUserLimits(address,uint256,uint256,uint256)": {
								"details": "Set user limits and amounts"
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "PermitAutoBuyContract",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n  0xa0\n  jumpi(tag_6, callvalue)\n  0x1f\n  bytecodeSize\n  codesize\n  dup2\n  swap1\n  sub\n  swap2\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup4\n  gt\n  dup5\n  dup5\n  lt\n  or\n  tag_4\n  jumpi\n  dup1\n  dup5\n  swap3\n  0x40\n  swap5\n  dup6\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_6\n  jumpi\n  tag_8\n  dup2\n  tag_1\n  jump\t// in\ntag_8:\n  swap1\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  tag_9\n  swap1\n  0x20\n  add\n  tag_1\n  jump\t// in\ntag_9:\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  swap1\n  dup2\n  iszero\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_10\n  jumpi\n  0x00\n    /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup2\n  and\n  dup5\n  or\n  dup3\n  sstore\n  mload(0x40)\n  swap4\n  swap2\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  swap2\n  and\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n  dup1\n  log3\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1857:1858  1 */\n  0x01\n  dup1\n  sstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n  and\n    /* \"PermitInvestre.sol\":1737:1757  usdc = IERC20(_usdc) */\n  0x80\n  mstore\n    /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n    /* \"PermitInvestre.sol\":1737:1757  usdc = IERC20(_usdc) */\n  0x80\n    /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n  mload\n  dup2\n  assignImmutable(\"0xd667c05f4ea0c4d90d21d40bfcf145844cbad8a35a13308e33b3fcd34757a132\")\n  return\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mstore(0x00, shl(0xe0, 0x1e4fbdf7))\n  0x00\n  0x04\n    /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n  mstore\n  0x24\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  revert\n    /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\ntag_6:\n  0x00\n  dup1\n  revert\ntag_4:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_1:\n  mload\n  swap1\n  sub(shl(0xa0, 0x01), 0x01)\n  dup3\n  and\n  dup3\n  sub\n  tag_6\n  jumpi\n  jump\t// out\nstop\n\nsub_0: assembly {\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_9, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_9:\n      0x00\n      swap1\n      shr(0xe0, calldataload(0x00))\n      swap1\n      dup2\n      0x0247f437\n      eq\n      tag_11\n      jumpi\n      pop\n      dup1\n      0x231534d7\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x3113e93c\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x3e413bee\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x5b8c9337\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x70a48572\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_27\n      jumpi\n      dup1\n      0x727b7acf\n      eq\n      tag_29\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_31\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_33\n      jumpi\n      dup1\n      0x9061a57f\n      eq\n      tag_35\n      jumpi\n      dup1\n      0x958e7387\n      eq\n      tag_37\n      jumpi\n      dup1\n      0xd34ac1c3\n      eq\n      tag_39\n      jumpi\n      0xf2fde38b\n      eq\n      tag_41\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n      jumpi(tag_45, callvalue)\n      jumpi(tag_45, slt(add(not(0x03), calldatasize), 0x20))\n      tag_47\n      tag_1\n      jump\t// in\n    tag_47:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_48\n      tag_7\n      jump\t// in\n    tag_48:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_49\n      jumpi\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup3\n      or\n      dup4\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_49:\n      shl(0xe0, 0x1e4fbdf7)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      dup3\n      mstore\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n      dup3\n      swap1\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      dup3\n      revert\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n    tag_45:\n      dup1\n      revert\n    tag_39:\n      pop\n      jumpi(tag_45, callvalue)\n      jumpi(tag_45, slt(add(not(0x03), calldatasize), 0x80))\n      tag_55\n      tag_1\n      jump\t// in\n    tag_55:\n        /* \"PermitInvestre.sol\":5025:5084  UserLimitsSet(user, dailyLimit, _likeAmount, _recastAmount) */\n      0x01d994bbbeefa5b75b8ca7fdc56d35809c6916ffbf520f22ccb028e4740f198d\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x60\n      calldataload(0x24)\n      calldataload(0x44)\n      swap4\n      calldataload(0x64)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      swap1\n      tag_56\n      tag_7\n      jump\t// in\n    tag_56:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      swap5\n      dup6\n      dup8\n      mstore\n        /* \"PermitInvestre.sol\":4884:4898  userDailyLimit */\n      0x03\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup3\n      0x40\n      dup9\n      keccak256\n      sstore\n      dup6\n      dup8\n      mstore\n      mstore(0x20, 0x04)\n      dup1\n      0x40\n      dup9\n      keccak256\n      sstore\n      dup6\n      dup8\n      mstore\n        /* \"PermitInvestre.sol\":4967:4979  recastAmount */\n      0x05\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup2\n      0x40\n      dup9\n      keccak256\n      sstore\n      mload(0x40)\n      swap3\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      mstore\n      0x40\n      dup3\n      add\n      mstore\n        /* \"PermitInvestre.sol\":5025:5084  UserLimitsSet(user, dailyLimit, _likeAmount, _recastAmount) */\n      log2\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_37:\n      pop\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x0100))\n      tag_61\n      tag_1\n      jump\t// in\n    tag_61:\n      swap1\n      calldataload(0x24)\n      swap2\n      calldataload(0x64)\n      swap1\n      0xff\n      dup3\n      and\n      dup1\n      swap3\n      sub\n      tag_91\n      jumpi\n      calldataload(0xc4)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_91\n      jumpi\n      tag_66\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_2\n      jump\t// in\n    tag_66:\n      swap5\n      swap1\n      calldataload(0xe4)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_91\n      jumpi\n      tag_69\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_2\n      jump\t// in\n    tag_69:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      swap2\n      tag_70\n      tag_7\n      jump\t// in\n    tag_70:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_71\n      tag_8\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2702:2720  _status == ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2698:2784  if (_status == ENTERED) {... */\n      tag_72\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x01\n      sstore\n        /* \"PermitInvestre.sol\":2515:2520  86400 */\n      0x015180\n        /* \"PermitInvestre.sol\":2497:2512  block.timestamp */\n      timestamp\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      div\n        /* \"PermitInvestre.sol\":2550:2567  uint256 maxAmount */\n      swap1\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      tag_74\n      dup5\n      tag_5\n      jump\t// in\n    tag_74:\n      tag_75\n      mload(0x40)\n      swap2\n      dup3\n      tag_3\n      jump\t// in\n    tag_75:\n      dup5\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      calldatasize\n      dup7\n      dup7\n      add\n      gt\n      tag_91\n      jumpi\n      dup6\n      dup6\n      dup4\n      calldatacopy\n      0x00\n      0x20\n      dup8\n      dup4\n      add\n      add\n      mstore\n      mload\n        /* \"PermitInvestre.sol\":2607:2635  keccak256(bytes(actionType)) */\n      swap1\n      keccak256\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      swap6\n      0x40\n      swap7\n      0x04\n      0x20\n      dup10\n      mload\n      tag_78\n      dup12\n      dup3\n      tag_3\n      jump\t// in\n    tag_78:\n      dup3\n      dup2\n      mstore\n      add\n      shl(0xe0, 0x6c696b65)\n      dup2\n      mstore\n        /* \"PermitInvestre.sol\":2663:2687  keccak256(bytes(\"like\")) */\n      keccak256\n        /* \"PermitInvestre.sol\":2649:2687  actionHash == keccak256(bytes(\"like\")) */\n      dup2\n      eq\n        /* \"PermitInvestre.sol\":2645:3045  if (actionHash == keccak256(bytes(\"like\"))) {... */\n      0x00\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      eq\n      tag_79\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n      mstore(0x20, 0x04)\n      dup9\n      swap1\n      keccak256\n      sload\n        /* \"PermitInvestre.sol\":2711:2731  likeAmount[user] > 0 */\n      iszero\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      tag_81\n      jumpi\n      0x00\n      mstore\n      mstore(0x20, 0x04)\n      dup7\n      0x00\n      keccak256\n      sload\n        /* \"PermitInvestre.sol\":2645:3045  if (actionHash == keccak256(bytes(\"like\"))) {... */\n    tag_83:\n        /* \"PermitInvestre.sol\":3071:3094  usdcAmount <= maxAmount */\n      dup7\n      gt\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      tag_84\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"PermitInvestre.sol\":3190:3204  userDailyLimit */\n      0x03\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup8\n      swap1\n      keccak256\n      sload\n      swap1\n      swap8\n      swap1\n        /* \"PermitInvestre.sol\":3228:3237  limit > 0 */\n      dup1\n      iszero\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      tag_86\n      jumpi\n      dup9\n      0x00\n      mstore\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup8\n      0x00\n      keccak256\n      dup5\n      0x00\n      mstore\n      0x20\n      mstore\n        /* \"PermitInvestre.sol\":3279:3315  dailySpent[user][today] + usdcAmount */\n      tag_88\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup8\n      dup10\n      0x00\n      keccak256\n      sload\n        /* \"PermitInvestre.sol\":3279:3315  dailySpent[user][today] + usdcAmount */\n      tag_6\n      jump\t// in\n    tag_88:\n        /* \"PermitInvestre.sol\":3279:3324  dailySpent[user][today] + usdcAmount <= limit */\n      gt\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      tag_89\n      jumpi\n        /* \"PermitInvestre.sol\":3459:3463  usdc */\n      immutable(\"0xd667c05f4ea0c4d90d21d40bfcf145844cbad8a35a13308e33b3fcd34757a132\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      swap1\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n      dup2\n      extcodesize\n      iszero\n      tag_91\n      jumpi\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup8\n      mload\n      swap1\n      shl(0xe0, 0xd505accf)\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n      dup3\n      mstore\n      dup10\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n      dup4\n      add\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"PermitInvestre.sol\":3512:3516  this */\n      address\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x24\n      dup4\n      add\n      mstore\n      dup8\n      0x44\n      dup4\n      add\n      mstore\n      calldataload(0x44)\n      0x64\n      dup4\n      add\n      mstore\n      0x84\n      dup3\n      add\n      mstore\n      calldataload(0x84)\n      0xa4\n      dup3\n      add\n      mstore\n      calldataload(0xa4)\n      0xc4\n      dup3\n      add\n      mstore\n      0x00\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n      dup2\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0xe4\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n      dup2\n      dup4\n      dup7\n      gas\n      call\n      dup1\n      iszero\n      tag_93\n      jumpi\n      tag_95\n      jumpi\n        /* \"PermitInvestre.sol\":2645:3045  if (actionHash == keccak256(bytes(\"like\"))) {... */\n    tag_96:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      pop\n      dup7\n      mload\n      shl(0xe0, 0x23b872dd)\n        /* \"PermitInvestre.sol\":3710:3760  usdc.transferFrom(user, address(this), usdcAmount) */\n      dup2\n      mstore\n      dup9\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"PermitInvestre.sol\":3710:3760  usdc.transferFrom(user, address(this), usdcAmount) */\n      dup3\n      add\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"PermitInvestre.sol\":3512:3516  this */\n      address\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x24\n      dup3\n      add\n      mstore\n      dup7\n      0x44\n      dup3\n      add\n      mstore\n      0x20\n        /* \"PermitInvestre.sol\":3710:3760  usdc.transferFrom(user, address(this), usdcAmount) */\n      dup2\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x64\n        /* \"PermitInvestre.sol\":3710:3760  usdc.transferFrom(user, address(this), usdcAmount) */\n      dup2\n      dup14\n      dup7\n      gas\n      call\n      swap1\n      dup2\n      iszero\n      tag_97\n      jumpi\n      dup11\n      swap2\n      tag_99\n      jumpi\n        /* \"PermitInvestre.sol\":2645:3045  if (actionHash == keccak256(bytes(\"like\"))) {... */\n    tag_100:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      pop\n      iszero\n      tag_101\n      jumpi\n      0x20\n      dup10\n      swap2\n      0x44\n      dup10\n      mload\n      dup1\n      swap5\n      dup2\n      swap4\n      shl(0xe0, 0x095ea7b3)\n        /* \"PermitInvestre.sol\":3886:3928  usdc.approve(KYBERSWAP_ROUTER, usdcAmount) */\n      dup4\n      mstore\n        /* \"PermitInvestre.sol\":960:1002  0x6131B5fae19EA4f9D964eAc0408E4408b66337b5 */\n      0x6131b5fae19ea4f9d964eac0408e4408b66337b5\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"PermitInvestre.sol\":3886:3928  usdc.approve(KYBERSWAP_ROUTER, usdcAmount) */\n      dup5\n      add\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup12\n      0x24\n      dup5\n      add\n      mstore\n        /* \"PermitInvestre.sol\":3886:3928  usdc.approve(KYBERSWAP_ROUTER, usdcAmount) */\n      gas\n      call\n      swap1\n      dup2\n      iszero\n      tag_103\n      jumpi\n      dup10\n      swap2\n      tag_105\n      jumpi\n        /* \"PermitInvestre.sol\":2645:3045  if (actionHash == keccak256(bytes(\"like\"))) {... */\n    tag_106:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      pop\n      iszero\n      tag_107\n      jumpi\n      dup8\n      dup10\n      dup2\n      swap11\n      swap3\n      dup3\n      swap4\n      dup10\n      mload\n      swap3\n      dup4\n      swap3\n      dup4\n      calldatacopy\n      dup2\n      add\n      dup4\n      dup2\n      mstore\n        /* \"PermitInvestre.sol\":4068:4099  KYBERSWAP_ROUTER.call(swapData) */\n      sub\n      swap1\n      dup3\n        /* \"PermitInvestre.sol\":960:1002  0x6131B5fae19EA4f9D964eAc0408E4408b66337b5 */\n      0x6131b5fae19ea4f9d964eac0408e4408b66337b5\n        /* \"PermitInvestre.sol\":4068:4099  KYBERSWAP_ROUTER.call(swapData) */\n      gas\n      call\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      jumpi(tag_109, iszero(returndatasize))\n      returndatasize\n      swap1\n      tag_111\n      dup3\n      tag_5\n      jump\t// in\n    tag_111:\n      swap2\n      tag_112\n      dup9\n      mload\n      swap4\n      dup5\n      tag_3\n      jump\t// in\n    tag_112:\n      dup3\n      mstore\n      returndatasize\n      dup10\n      0x20\n      dup5\n      add\n      returndatacopy\n    tag_113:\n      iszero\n      tag_114\n      jumpi\n      pop\n      swap2\n      dup1\n        /* \"PermitInvestre.sol\":4412:4643  PermitAutoBuyExecuted(... */\n      0xdb2f68abe9707696a4a1b20d3ad43e58cbbc37bf47b36c8b0b70e4a0291a30c6\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      swap6\n      swap5\n      swap3\n      0x80\n      swap5\n      dup9\n      dup11\n      mstore\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup7\n      dup11\n      keccak256\n      swap1\n      dup11\n      mstore\n      0x20\n      mstore\n      dup6\n      dup10\n      keccak256\n        /* \"PermitInvestre.sol\":4193:4230  dailySpent[user][today] += usdcAmount */\n      tag_116\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup6\n      dup3\n      sload\n        /* \"PermitInvestre.sol\":4193:4230  dailySpent[user][today] += usdcAmount */\n      tag_6\n      jump\t// in\n    tag_116:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      swap1\n      sstore\n      0x60\n      dup7\n      mload\n      swap7\n      dup8\n      swap6\n      dup7\n      mstore\n      dup11\n      0x20\n      dup8\n      add\n      mstore\n      dup6\n      add\n      mstore\n      dup2\n      0x60\n      dup6\n      add\n      mstore\n      dup5\n      dup5\n      add\n      calldatacopy\n      dup2\n      dup2\n      add\n      dup4\n      add\n      dup8\n      swap1\n      mstore\n      0x1f\n      add\n      not(0x1f)\n      and\n      dup2\n      add\n        /* \"PermitInvestre.sol\":4412:4643  PermitAutoBuyExecuted(... */\n      sub\n      add\n      swap1\n      log3\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x01\n      dup1\n      sstore\n      dup1\n      return\n    tag_114:\n      0x44\n      dup9\n      swap2\n      0x20\n      dup9\n      mload\n        /* \"PermitInvestre.sol\":3005:3034  revert(\"Invalid action type\") */\n      swap4\n      dup5\n      swap3\n      shl(0xe5, 0x461bcd)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      mstore\n      dup3\n      0x04\n      dup6\n      add\n      mstore\n      dup1\n      mload\n      swap3\n      dup4\n      swap2\n      dup3\n      0x24\n      dup8\n      add\n      mstore\n      add\n      dup6\n      dup6\n      add\n      mcopy\n      dup3\n      dup3\n      add\n      dup5\n      add\n      mstore\n      0x1f\n      add\n      not(0x1f)\n      and\n      dup2\n      add\n      sub\n      add\n      swap1\n      revert\n    tag_109:\n      0x60\n      swap1\n      jump(tag_113)\n    tag_107:\n      dup6\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x16\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x52, 0x149bdd5d195c88185c1c1c9bdd985b0819985a5b1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"PermitInvestre.sol\":3886:3928  usdc.approve(KYBERSWAP_ROUTER, usdcAmount) */\n    tag_105:\n      tag_117\n      swap2\n      pop\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"PermitInvestre.sol\":3886:3928  usdc.approve(KYBERSWAP_ROUTER, usdcAmount) */\n      returndatasize\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"PermitInvestre.sol\":3886:3928  usdc.approve(KYBERSWAP_ROUTER, usdcAmount) */\n      gt\n      tag_118\n      jumpi\n    tag_119:\n      tag_120\n      dup2\n      dup4\n      tag_3\n      jump\t// in\n    tag_120:\n      dup2\n      add\n      swap1\n      tag_4\n      jump\t// in\n    tag_117:\n      0x00\n      jump(tag_106)\n    tag_118:\n      pop\n      returndatasize\n      jump(tag_119)\n    tag_103:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup8\n      mload\n      returndatasize\n      dup12\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_101:\n      dup7\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x14\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x62, 0x1554d110c81d1c985b9cd9995c8819985a5b1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"PermitInvestre.sol\":3710:3760  usdc.transferFrom(user, address(this), usdcAmount) */\n    tag_99:\n      tag_121\n      swap2\n      pop\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"PermitInvestre.sol\":3710:3760  usdc.transferFrom(user, address(this), usdcAmount) */\n      returndatasize\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"PermitInvestre.sol\":3710:3760  usdc.transferFrom(user, address(this), usdcAmount) */\n      gt\n      tag_118\n      jumpi\n      tag_120\n      dup2\n      dup4\n      tag_3\n      jump\t// in\n    tag_121:\n      0x00\n      jump(tag_100)\n    tag_97:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup9\n      mload\n      returndatasize\n      dup13\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n    tag_95:\n      tag_125\n      swap2\n      swap10\n      pop\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n      swap1\n      tag_3\n      jump\t// in\n    tag_125:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n      swap8\n      0x00\n      jump(tag_96)\n    tag_93:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup9\n      mload\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"PermitInvestre.sol\":3438:3618  IERC20Permit(address(usdc)).permit(... */\n    tag_91:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n      dup1\n      revert\n    tag_89:\n      dup7\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x14\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x62, 0x11185a5b1e481b1a5b5a5d08195e18d959591959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_86:\n      dup8\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x6a, 0x11185a5b1e481b1a5b5a5d081b9bdd081cd95d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_84:\n      dup7\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1b\n      0x24\n      dup3\n      add\n      mstore\n      0x416d6f756e74206578636565647320616374696f6e206c696d69740000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_81:\n      dup8\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x6a, 0x131a5ad948185b5bdd5b9d081b9bdd081cd95d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"PermitInvestre.sol\":2645:3045  if (actionHash == keccak256(bytes(\"like\"))) {... */\n    tag_79:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x06\n      0x20\n      dup10\n      mload\n      tag_126\n      dup12\n      dup3\n      tag_3\n      jump\t// in\n    tag_126:\n      dup3\n      dup2\n      mstore\n      add\n      shl(0xd2, 0x1c9958d85cdd)\n      dup2\n      mstore\n        /* \"PermitInvestre.sol\":2832:2858  keccak256(bytes(\"recast\")) */\n      keccak256\n        /* \"PermitInvestre.sol\":2818:2858  actionHash == keccak256(bytes(\"recast\")) */\n      eq\n        /* \"PermitInvestre.sol\":2814:3045  if (actionHash == keccak256(bytes(\"recast\"))) {... */\n      0x00\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      eq\n      tag_127\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"PermitInvestre.sol\":2882:2894  recastAmount */\n      0x05\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup9\n      swap1\n      keccak256\n      sload\n        /* \"PermitInvestre.sol\":2882:2904  recastAmount[user] > 0 */\n      iszero\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      tag_129\n      jumpi\n      0x00\n      mstore\n        /* \"PermitInvestre.sol\":2882:2894  recastAmount */\n      0x05\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup7\n      0x00\n      keccak256\n      sload\n        /* \"PermitInvestre.sol\":2645:3045  if (actionHash == keccak256(bytes(\"like\"))) {... */\n      jump(tag_83)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n    tag_129:\n      dup8\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x15\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x5a, 0x149958d85cdd08185b5bdd5b9d081b9bdd081cd95d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"PermitInvestre.sol\":2814:3045  if (actionHash == keccak256(bytes(\"recast\"))) {... */\n    tag_127:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup7\n      mload\n      shl(0xe5, 0x461bcd)\n        /* \"PermitInvestre.sol\":3005:3034  revert(\"Invalid action type\") */\n      dup2\n      mstore\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      0x04\n        /* \"PermitInvestre.sol\":3005:3034  revert(\"Invalid action type\") */\n      dup3\n      add\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x68, 0x496e76616c696420616374696f6e2074797065)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n        /* \"PermitInvestre.sol\":3005:3034  revert(\"Invalid action type\") */\n      revert\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2698:2784  if (_status == ENTERED) {... */\n    tag_72:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2743:2773  ReentrancyGuardReentrantCall() */\n      shl(0xe0, 0x3ee5aeb5)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2743:2773  ReentrancyGuardReentrantCall() */\n      mstore\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2743:2773  ReentrancyGuardReentrantCall() */\n      revert\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n    tag_35:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x40))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_135\n      tag_1\n      jump\t// in\n    tag_135:\n      and\n      0x00\n      mstore\n        /* \"PermitInvestre.sol\":1049:1114  mapping(address => mapping(uint256 => uint256)) public dailySpent */\n      0x02\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      mstore(0x00, calldataload(0x24))\n      0x20\n      mstore\n      0x20\n      sload(keccak256(0x00, 0x40))\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_33:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x00)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_31:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_144\n      tag_7\n      jump\t// in\n    tag_144:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_145\n      tag_8\n      jump\t// in\n    tag_145:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      and\n      shl(0xa0, 0x01)\n      or\n      swap1\n      sstore\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2427:2447  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n      swap1\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2427:2447  Paused(_msgSender()) */\n      log1\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      stop\n    tag_29:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x40))\n      tag_150\n      tag_1\n      jump\t// in\n    tag_150:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_151\n      tag_7\n      jump\t// in\n    tag_151:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n      dup1\n      sload\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n        /* \"PermitInvestre.sol\":5669:5708  IERC20(token).transfer(owner(), amount) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      swap2\n      dup3\n      and\n      0x04\n        /* \"PermitInvestre.sol\":5669:5708  IERC20(token).transfer(owner(), amount) */\n      dup3\n      add\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup1\n      calldataload\n      swap1\n      dup3\n      add\n      mstore\n      swap3\n      0x20\n      swap3\n      dup5\n      swap3\n      0x44\n      swap3\n      dup5\n      swap3\n      swap2\n      and\n        /* \"PermitInvestre.sol\":5669:5708  IERC20(token).transfer(owner(), amount) */\n      gas\n      call\n      dup1\n      iszero\n      tag_152\n      jumpi\n      tag_154\n      jumpi\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      stop\n        /* \"PermitInvestre.sol\":5669:5708  IERC20(token).transfer(owner(), amount) */\n    tag_154:\n      tag_156\n      swap1\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"PermitInvestre.sol\":5669:5708  IERC20(token).transfer(owner(), amount) */\n      returndatasize\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"PermitInvestre.sol\":5669:5708  IERC20(token).transfer(owner(), amount) */\n      gt\n      tag_118\n      jumpi\n      tag_120\n      dup2\n      dup4\n      tag_3\n      jump\t// in\n    tag_156:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      stop\n        /* \"PermitInvestre.sol\":5669:5708  IERC20(token).transfer(owner(), amount) */\n    tag_152:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_27:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_164\n      tag_7\n      jump\t// in\n    tag_164:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup3\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      stop\n    tag_25:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      mload(0x40)\n        /* \"PermitInvestre.sol\":960:1002  0x6131B5fae19EA4f9D964eAc0408E4408b66337b5 */\n      0x6131b5fae19ea4f9d964eac0408e4408b66337b5\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_23:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      and(shr(0xa0, sload(0x00)), 0xff)\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_21:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x20))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_177\n      tag_1\n      jump\t// in\n    tag_177:\n      and\n      0x00\n      mstore\n        /* \"PermitInvestre.sol\":5295:5305  dailySpent */\n      0x02\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"PermitInvestre.sol\":5273:5278  86400 */\n      0x015180\n        /* \"PermitInvestre.sol\":5255:5270  block.timestamp */\n      timestamp\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      div\n      0x00\n      mstore\n      0x20\n      mstore\n      0x20\n      sload(keccak256(0x00, 0x40))\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_19:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_182\n      tag_7\n      jump\t// in\n    tag_182:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      sload(0x00)\n      0xff\n      dup2\n      0xa0\n      shr\n      and\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2140:2149  !paused() */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2136:2198  if (!paused()) {... */\n      tag_183\n      jumpi\n      not(shl(0xa0, 0xff))\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      0x00\n      sstore\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2674:2696  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n      swap1\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2674:2696  Unpaused(_msgSender()) */\n      log1\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      stop\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2136:2198  if (!paused()) {... */\n    tag_183:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2172:2187  ExpectedPause() */\n      shl(0xe0, 0x8dfc202b)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2172:2187  ExpectedPause() */\n      mstore\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2172:2187  ExpectedPause() */\n      revert\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n    tag_17:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n        /* \"PermitInvestre.sol\":851:879  IERC20 public immutable usdc */\n      immutable(\"0xd667c05f4ea0c4d90d21d40bfcf145844cbad8a35a13308e33b3fcd34757a132\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_15:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x20))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_193\n      tag_1\n      jump\t// in\n    tag_193:\n      and\n      0x00\n      mstore\n        /* \"PermitInvestre.sol\":1145:1194  mapping(address => uint256) public userDailyLimit */\n      0x03\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x20\n      sload(keccak256(0x00, 0x40))\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_13:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x20))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_198\n      tag_1\n      jump\t// in\n    tag_198:\n      and\n      0x00\n      mstore\n      mstore(0x20, 0x04)\n      0x20\n      sload(keccak256(0x00, 0x40))\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_11:\n      jumpi(tag_91, callvalue)\n      jumpi(tag_91, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_203\n      tag_1\n      jump\t// in\n    tag_203:\n      and\n      0x00\n      mstore\n        /* \"PermitInvestre.sol\":1251:1298  mapping(address => uint256) public recastAmount */\n      0x05\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      mstore\n      sload(keccak256(0x00, 0x40))\n      dup2\n      mstore\n      return\n    tag_1:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_91\n      jumpi\n      jump\t// out\n    tag_2:\n      swap2\n      dup2\n      0x1f\n      dup5\n      add\n      slt\n      iszero\n      tag_91\n      jumpi\n      dup3\n      calldataload\n      swap2\n      0xffffffffffffffff\n      dup4\n      gt\n      tag_91\n      jumpi\n      0x20\n      dup4\n      dup2\n      dup7\n      add\n      swap6\n      add\n      add\n      gt\n      tag_91\n      jumpi\n      jump\t// out\n    tag_3:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_212\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_212:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_4:\n      swap1\n      dup2\n      0x20\n      swap2\n      sub\n      slt\n      tag_91\n      jumpi\n      mload\n      dup1\n      iszero\n      iszero\n      dup2\n      sub\n      tag_91\n      jumpi\n      swap1\n      jump\t// out\n    tag_5:\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_212\n      jumpi\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_6:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_220\n      jumpi\n      jump\t// out\n    tag_220:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_7:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      sub\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_222\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      shl(0xe0, 0x118cdaa7)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1878:2006  function _requireNotPaused() internal view virtual {... */\n    tag_8:\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      0xff\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1796:1803  _paused */\n      0x00\n        /* \"PermitInvestre.sol\":771:5717  contract PermitAutoBuyContract is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      0xa0\n      shr\n      and\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1939:2000  if (paused()) {... */\n      tag_224\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1878:2006  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1939:2000  if (paused()) {... */\n    tag_224:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1974:1989  EnforcedPause() */\n      shl(0xe0, 0xd93c0665)\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1796:1803  _paused */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1974:1989  EnforcedPause() */\n      mstore\n      0x04\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1796:1803  _paused */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1974:1989  EnforcedPause() */\n      revert\n\n    auxdata: 0xa2646970667358221220317b80e8310c18d21493202e4709b898028378c0fc9e563126ce8d26c2e3edcb64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"abi_decode_address_fromMemory": {
									"entryPoint": 258,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60a0346100ea57601f610e4538819003918201601f19168301916001600160401b038311848410176100ee5780849260409485528339810103126100ea5761004681610102565b906001600160a01b039061005c90602001610102565b169081156100d7575f80546001600160a01b031981168417825560405193916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180556001600160a01b0316608052610d2e908161011782396080518181816103590152610b130152f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036100ea5756fe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630247f43714610bb257508063231534d714610b7a5780633113e93c14610b425780633e413bee14610afe5780633f4ba83a14610a925780635b8c933714610a4b5780635c975abb14610a2757806370a48572146109f9578063715018a6146109a2578063727b7acf146109195780638456cb59146108b95780638da5cb5b146108925780639061a57f1461084e578063958e7387146101ed578063d34ac1c3146101565763f2fde38b146100ce575f80fd5b34610153576020366003190112610153576100e7610be6565b6100ef610cb5565b6001600160a01b0316801561013f5781546001600160a01b03198116821783556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b631e4fbdf760e01b82526004829052602482fd5b80fd5b503461015357608036600319011261015357610170610be6565b7f01d994bbbeefa5b75b8ca7fdc56d35809c6916ffbf520f22ccb028e4740f198d606060243560443593606435906101a6610cb5565b60018060a01b03169485875260036020528260408820558587526004602052806040882055858752600560205281604088205560405192835260208301526040820152a280f35b503461067e5761010036600319011261067e57610208610be6565b90602435916064359060ff821680920361067e5760c43567ffffffffffffffff811161067e5761023c903690600401610bfc565b949060e43567ffffffffffffffff811161067e5761025e903690600401610bfc565b91610267610cb5565b61026f610cdb565b60026001541461083f5760026001556201518042049061028e84610c78565b61029b6040519182610c2a565b8481526020810190368686011161067e57858583375f60208783010152519020956040966004602089516102cf8b82610c2a565b82815201636c696b6560e01b81522081145f1461077557506001600160a01b0381165f8181526004602052889020541561073b575f526004602052865f20545b86116106f7576001600160a01b03165f81815260036020528790205490979080156106bd57885f526002602052875f20845f5260205261035287895f2054610c94565b11610682577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561067e5787519063d505accf60e01b82528960048301523060248301528760448301526044356064830152608482015260843560a482015260a43560c48201525f8160e48183865af180156106745761065f575b5086516323b872dd60e01b81528860048201523060248201528660448201526020816064818d865af1908115610655578a91610636575b50156105fb5760208991604489518094819363095ea7b360e01b8352736131b5fae19ea4f9d964eac0408e4408b66337b560048401528b60248401525af19081156105f15789916105c2575b5015610585578789819a928293895192839283378101838152039082736131b5fae19ea4f9d964eac0408e4408b66337b55af13d1561057d573d906104a082610c78565b916104ad88519384610c2a565b82523d89602084013e5b1561053f575091807fdb2f68abe9707696a4a1b20d3ad43e58cbbc37bf47b36c8b0b70e4a0291a30c6959492608094888a526002602052868a20908a52602052858920610505858254610c94565b90556060865196879586528a6020870152850152816060850152848401378181018301879052601f01601f19168101030190a36001805580f35b604488916020885193849262461bcd60e51b84528260048501528051928391826024870152018585015e828201840152601f01601f19168101030190fd5b6060906104b7565b855162461bcd60e51b8152602060048201526016602482015275149bdd5d195c88185c1c1c9bdd985b0819985a5b195960521b6044820152606490fd5b6105e4915060203d6020116105ea575b6105dc8183610c2a565b810190610c60565b5f61045c565b503d6105d2565b87513d8b823e3d90fd5b865162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606490fd5b61064f915060203d6020116105ea576105dc8183610c2a565b5f610410565b88513d8c823e3d90fd5b61066c9199505f90610c2a565b5f975f6103d9565b88513d5f823e3d90fd5b5f80fd5b865162461bcd60e51b815260206004820152601460248201527311185a5b1e481b1a5b5a5d08195e18d95959195960621b6044820152606490fd5b875162461bcd60e51b815260206004820152601360248201527211185a5b1e481b1a5b5a5d081b9bdd081cd95d606a1b6044820152606490fd5b865162461bcd60e51b815260206004820152601b60248201527f416d6f756e74206578636565647320616374696f6e206c696d697400000000006044820152606490fd5b875162461bcd60e51b8152602060048201526013602482015272131a5ad948185b5bdd5b9d081b9bdd081cd95d606a1b6044820152606490fd5b6006602089516107858b82610c2a565b82815201651c9958d85cdd60d21b815220145f14610805576001600160a01b0381165f818152600560205288902054156107c9575f526005602052865f205461030f565b875162461bcd60e51b8152602060048201526015602482015274149958d85cdd08185b5bdd5b9d081b9bdd081cd95d605a1b6044820152606490fd5b865162461bcd60e51b8152602060048201526013602482015272496e76616c696420616374696f6e207479706560681b6044820152606490fd5b633ee5aeb560e01b5f5260045ffd5b3461067e57604036600319011261067e576001600160a01b0361086f610be6565b165f52600260205260405f206024355f52602052602060405f2054604051908152f35b3461067e575f36600319011261067e575f546040516001600160a01b039091168152602090f35b3461067e575f36600319011261067e576108d1610cb5565b6108d9610cdb565b5f805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b3461067e57604036600319011261067e57610932610be6565b61093a610cb5565b5f805460405163a9059cbb60e01b81526001600160a01b0391821660048201526024803590820152926020928492604492849291165af180156109975761097d57005b6109959060203d6020116105ea576105dc8183610c2a565b005b6040513d5f823e3d90fd5b3461067e575f36600319011261067e576109ba610cb5565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461067e575f36600319011261067e576020604051736131b5fae19ea4f9d964eac0408e4408b66337b58152f35b3461067e575f36600319011261067e57602060ff5f5460a01c166040519015158152f35b3461067e57602036600319011261067e576001600160a01b03610a6c610be6565b165f52600260205260405f206201518042045f52602052602060405f2054604051908152f35b3461067e575f36600319011261067e57610aaa610cb5565b5f5460ff8160a01c1615610aef5760ff60a01b19165f556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b638dfc202b60e01b5f5260045ffd5b3461067e575f36600319011261067e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461067e57602036600319011261067e576001600160a01b03610b63610be6565b165f526003602052602060405f2054604051908152f35b3461067e57602036600319011261067e576001600160a01b03610b9b610be6565b165f526004602052602060405f2054604051908152f35b3461067e57602036600319011261067e576020906001600160a01b03610bd6610be6565b165f526005825260405f20548152f35b600435906001600160a01b038216820361067e57565b9181601f8401121561067e5782359167ffffffffffffffff831161067e576020838186019501011161067e57565b90601f8019910116810190811067ffffffffffffffff821117610c4c57604052565b634e487b7160e01b5f52604160045260245ffd5b9081602091031261067e5751801515810361067e5790565b67ffffffffffffffff8111610c4c57601f01601f191660200190565b91908201809211610ca157565b634e487b7160e01b5f52601160045260245ffd5b5f546001600160a01b03163303610cc857565b63118cdaa760e01b5f523360045260245ffd5b60ff5f5460a01c16610ce957565b63d93c066560e01b5f5260045ffdfea2646970667358221220317b80e8310c18d21493202e4709b898028378c0fc9e563126ce8d26c2e3edcb64736f6c634300081e0033",
							"opcodes": "PUSH1 0xA0 CALLVALUE PUSH2 0xEA JUMPI PUSH1 0x1F PUSH2 0xE45 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xEE JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xEA JUMPI PUSH2 0x46 DUP2 PUSH2 0x102 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x5C SWAP1 PUSH1 0x20 ADD PUSH2 0x102 JUMP JUMPDEST AND SWAP1 DUP2 ISZERO PUSH2 0xD7 JUMPI PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP5 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 PUSH1 0x1 DUP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH2 0xD2E SWAP1 DUP2 PUSH2 0x117 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x359 ADD MSTORE PUSH2 0xB13 ADD MSTORE RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xEA JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x247F437 EQ PUSH2 0xBB2 JUMPI POP DUP1 PUSH4 0x231534D7 EQ PUSH2 0xB7A JUMPI DUP1 PUSH4 0x3113E93C EQ PUSH2 0xB42 JUMPI DUP1 PUSH4 0x3E413BEE EQ PUSH2 0xAFE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0xA92 JUMPI DUP1 PUSH4 0x5B8C9337 EQ PUSH2 0xA4B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0xA27 JUMPI DUP1 PUSH4 0x70A48572 EQ PUSH2 0x9F9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0x727B7ACF EQ PUSH2 0x919 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x8B9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x892 JUMPI DUP1 PUSH4 0x9061A57F EQ PUSH2 0x84E JUMPI DUP1 PUSH4 0x958E7387 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xD34AC1C3 EQ PUSH2 0x156 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0xCE JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x153 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x153 JUMPI PUSH2 0xE7 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0xEF PUSH2 0xCB5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x13F JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 OR DUP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x153 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x153 JUMPI PUSH2 0x170 PUSH2 0xBE6 JUMP JUMPDEST PUSH32 0x1D994BBBEEFA5B75B8CA7FDC56D35809C6916FFBF520F22CCB028E4740F198D PUSH1 0x60 PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP4 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x1A6 PUSH2 0xCB5 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP5 DUP6 DUP8 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 DUP9 KECCAK256 SSTORE DUP6 DUP8 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP9 KECCAK256 SSTORE DUP6 DUP8 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 DUP9 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG2 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x67E JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x208 PUSH2 0xBE6 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0xFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x67E JUMPI PUSH1 0xC4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x67E JUMPI PUSH2 0x23C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP5 SWAP1 PUSH1 0xE4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x67E JUMPI PUSH2 0x25E SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP2 PUSH2 0x267 PUSH2 0xCB5 JUMP JUMPDEST PUSH2 0x26F PUSH2 0xCDB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x83F JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE PUSH3 0x15180 TIMESTAMP DIV SWAP1 PUSH2 0x28E DUP5 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x29B PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xC2A JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 CALLDATASIZE DUP7 DUP7 ADD GT PUSH2 0x67E JUMPI DUP6 DUP6 DUP4 CALLDATACOPY PUSH0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE MLOAD SWAP1 KECCAK256 SWAP6 PUSH1 0x40 SWAP7 PUSH1 0x4 PUSH1 0x20 DUP10 MLOAD PUSH2 0x2CF DUP12 DUP3 PUSH2 0xC2A JUMP JUMPDEST DUP3 DUP2 MSTORE ADD PUSH4 0x6C696B65 PUSH1 0xE0 SHL DUP2 MSTORE KECCAK256 DUP2 EQ PUSH0 EQ PUSH2 0x775 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE DUP9 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x73B JUMPI PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE DUP7 PUSH0 KECCAK256 SLOAD JUMPDEST DUP7 GT PUSH2 0x6F7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE DUP8 SWAP1 KECCAK256 SLOAD SWAP1 SWAP8 SWAP1 DUP1 ISZERO PUSH2 0x6BD JUMPI DUP9 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE DUP8 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x352 DUP8 DUP10 PUSH0 KECCAK256 SLOAD PUSH2 0xC94 JUMP JUMPDEST GT PUSH2 0x682 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x67E JUMPI DUP8 MLOAD SWAP1 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP3 MSTORE DUP10 PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE DUP8 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xC4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0xE4 DUP2 DUP4 DUP7 GAS CALL DUP1 ISZERO PUSH2 0x674 JUMPI PUSH2 0x65F JUMPI JUMPDEST POP DUP7 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE DUP9 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP7 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP2 DUP14 DUP7 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x655 JUMPI DUP11 SWAP2 PUSH2 0x636 JUMPI JUMPDEST POP ISZERO PUSH2 0x5FB JUMPI PUSH1 0x20 DUP10 SWAP2 PUSH1 0x44 DUP10 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 MSTORE PUSH20 0x6131B5FAE19EA4F9D964EAC0408E4408B66337B5 PUSH1 0x4 DUP5 ADD MSTORE DUP12 PUSH1 0x24 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x5F1 JUMPI DUP10 SWAP2 PUSH2 0x5C2 JUMPI JUMPDEST POP ISZERO PUSH2 0x585 JUMPI DUP8 DUP10 DUP2 SWAP11 SWAP3 DUP3 SWAP4 DUP10 MLOAD SWAP3 DUP4 SWAP3 DUP4 CALLDATACOPY DUP2 ADD DUP4 DUP2 MSTORE SUB SWAP1 DUP3 PUSH20 0x6131B5FAE19EA4F9D964EAC0408E4408B66337B5 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x57D JUMPI RETURNDATASIZE SWAP1 PUSH2 0x4A0 DUP3 PUSH2 0xC78 JUMP JUMPDEST SWAP2 PUSH2 0x4AD DUP9 MLOAD SWAP4 DUP5 PUSH2 0xC2A JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE DUP10 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x53F JUMPI POP SWAP2 DUP1 PUSH32 0xDB2F68ABE9707696A4A1B20D3AD43E58CBBC37BF47B36C8B0B70E4A0291A30C6 SWAP6 SWAP5 SWAP3 PUSH1 0x80 SWAP5 DUP9 DUP11 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE DUP7 DUP11 KECCAK256 SWAP1 DUP11 MSTORE PUSH1 0x20 MSTORE DUP6 DUP10 KECCAK256 PUSH2 0x505 DUP6 DUP3 SLOAD PUSH2 0xC94 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x60 DUP7 MLOAD SWAP7 DUP8 SWAP6 DUP7 MSTORE DUP11 PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD MSTORE DUP2 PUSH1 0x60 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY DUP2 DUP2 ADD DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 LOG3 PUSH1 0x1 DUP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x44 DUP9 SWAP2 PUSH1 0x20 DUP9 MLOAD SWAP4 DUP5 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE DUP3 PUSH1 0x4 DUP6 ADD MSTORE DUP1 MLOAD SWAP3 DUP4 SWAP2 DUP3 PUSH1 0x24 DUP8 ADD MSTORE ADD DUP6 DUP6 ADD MCOPY DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x4B7 JUMP JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x149BDD5D195C88185C1C1C9BDD985B0819985A5B1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x5E4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5EA JUMPI JUMPDEST PUSH2 0x5DC DUP2 DUP4 PUSH2 0xC2A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH0 PUSH2 0x45C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5D2 JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1554D110C81D1C985B9CD9995C8819985A5B1959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x64F SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5EA JUMPI PUSH2 0x5DC DUP2 DUP4 PUSH2 0xC2A JUMP JUMPDEST PUSH0 PUSH2 0x410 JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP13 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x66C SWAP2 SWAP10 POP PUSH0 SWAP1 PUSH2 0xC2A JUMP JUMPDEST PUSH0 SWAP8 PUSH0 PUSH2 0x3D9 JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x11185A5B1E481B1A5B5A5D08195E18D959591959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x11185A5B1E481B1A5B5A5D081B9BDD081CD95D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74206578636565647320616374696F6E206C696D69740000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x131A5AD948185B5BDD5B9D081B9BDD081CD95D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x20 DUP10 MLOAD PUSH2 0x785 DUP12 DUP3 PUSH2 0xC2A JUMP JUMPDEST DUP3 DUP2 MSTORE ADD PUSH6 0x1C9958D85CDD PUSH1 0xD2 SHL DUP2 MSTORE KECCAK256 EQ PUSH0 EQ PUSH2 0x805 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP9 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x7C9 JUMPI PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP7 PUSH0 KECCAK256 SLOAD PUSH2 0x30F JUMP JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x149958D85CDD08185B5BDD5B9D081B9BDD081CD95D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E76616C696420616374696F6E2074797065 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x86F PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x8D1 PUSH2 0xCB5 JUMP JUMPDEST PUSH2 0x8D9 PUSH2 0xCDB JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x932 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x93A PUSH2 0xCB5 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 CALLDATALOAD SWAP1 DUP3 ADD MSTORE SWAP3 PUSH1 0x20 SWAP3 DUP5 SWAP3 PUSH1 0x44 SWAP3 DUP5 SWAP3 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0x997 JUMPI PUSH2 0x97D JUMPI STOP JUMPDEST PUSH2 0x995 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5EA JUMPI PUSH2 0x5DC DUP2 DUP4 PUSH2 0xC2A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x9BA PUSH2 0xCB5 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0x6131B5FAE19EA4F9D964EAC0408E4408B66337B5 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x20 PUSH1 0xFF PUSH0 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xA6C PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH3 0x15180 TIMESTAMP DIV PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0xAAA PUSH2 0xCB5 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND ISZERO PUSH2 0xAEF JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH0 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH4 0x8DFC202B PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB63 PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB9B PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBD6 PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x67E JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x67E JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x67E JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x67E JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xC4C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x67E JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x67E JUMPI SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC4C JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xCA1 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xCC8 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0xFF PUSH0 SLOAD PUSH1 0xA0 SHR AND PUSH2 0xCE9 JUMPI JUMP JUMPDEST PUSH4 0xD93C0665 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE PUSH28 0x80E8310C18D21493202E4709B898028378C0FC9E563126CE8D26C2E3 0xED 0xCB PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "771:4946:6:-:0;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;-1:-1:-1;;;;;771:4946:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;771:4946:6;;;;;;:::i;:::-;;1273:26:0;;;1269:95;;-1:-1:-1;771:4946:6;;-1:-1:-1;;;;;;771:4946:6;;;;;;;;;;-1:-1:-1;;;;;771:4946:6;;;;3052:40:0;;-1:-1:-1;3052:40:0;1857:1:5;;;-1:-1:-1;;;;;771:4946:6;1737:20;;771:4946;;;;;;1737:20;771:4946;;;;;;;;;;;1269:95:0;1322:31;;;-1:-1:-1;1322:31:0;-1:-1:-1;1322:31:0;771:4946:6;;-1:-1:-1;1322:31:0;771:4946:6;-1:-1:-1;771:4946:6;;;;;;-1:-1:-1;771:4946:6;;;;;-1:-1:-1;771:4946:6;;;;-1:-1:-1;;;;;771:4946:6;;;;;;:::o"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 3046,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_bool_fromMemory": {
									"entryPoint": 3168,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_bytes_calldata": {
									"entryPoint": 3068,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"array_allocation_size_bytes": {
									"entryPoint": 3192,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 3220,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 3114,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 3253,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_requireNotPaused": {
									"entryPoint": 3291,
									"id": 353,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"485": [
									{
										"length": 32,
										"start": 857
									},
									{
										"length": 32,
										"start": 2835
									}
								]
							},
							"linkReferences": {},
							"object": "6080806040526004361015610012575f80fd5b5f905f3560e01c9081630247f43714610bb257508063231534d714610b7a5780633113e93c14610b425780633e413bee14610afe5780633f4ba83a14610a925780635b8c933714610a4b5780635c975abb14610a2757806370a48572146109f9578063715018a6146109a2578063727b7acf146109195780638456cb59146108b95780638da5cb5b146108925780639061a57f1461084e578063958e7387146101ed578063d34ac1c3146101565763f2fde38b146100ce575f80fd5b34610153576020366003190112610153576100e7610be6565b6100ef610cb5565b6001600160a01b0316801561013f5781546001600160a01b03198116821783556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b631e4fbdf760e01b82526004829052602482fd5b80fd5b503461015357608036600319011261015357610170610be6565b7f01d994bbbeefa5b75b8ca7fdc56d35809c6916ffbf520f22ccb028e4740f198d606060243560443593606435906101a6610cb5565b60018060a01b03169485875260036020528260408820558587526004602052806040882055858752600560205281604088205560405192835260208301526040820152a280f35b503461067e5761010036600319011261067e57610208610be6565b90602435916064359060ff821680920361067e5760c43567ffffffffffffffff811161067e5761023c903690600401610bfc565b949060e43567ffffffffffffffff811161067e5761025e903690600401610bfc565b91610267610cb5565b61026f610cdb565b60026001541461083f5760026001556201518042049061028e84610c78565b61029b6040519182610c2a565b8481526020810190368686011161067e57858583375f60208783010152519020956040966004602089516102cf8b82610c2a565b82815201636c696b6560e01b81522081145f1461077557506001600160a01b0381165f8181526004602052889020541561073b575f526004602052865f20545b86116106f7576001600160a01b03165f81815260036020528790205490979080156106bd57885f526002602052875f20845f5260205261035287895f2054610c94565b11610682577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561067e5787519063d505accf60e01b82528960048301523060248301528760448301526044356064830152608482015260843560a482015260a43560c48201525f8160e48183865af180156106745761065f575b5086516323b872dd60e01b81528860048201523060248201528660448201526020816064818d865af1908115610655578a91610636575b50156105fb5760208991604489518094819363095ea7b360e01b8352736131b5fae19ea4f9d964eac0408e4408b66337b560048401528b60248401525af19081156105f15789916105c2575b5015610585578789819a928293895192839283378101838152039082736131b5fae19ea4f9d964eac0408e4408b66337b55af13d1561057d573d906104a082610c78565b916104ad88519384610c2a565b82523d89602084013e5b1561053f575091807fdb2f68abe9707696a4a1b20d3ad43e58cbbc37bf47b36c8b0b70e4a0291a30c6959492608094888a526002602052868a20908a52602052858920610505858254610c94565b90556060865196879586528a6020870152850152816060850152848401378181018301879052601f01601f19168101030190a36001805580f35b604488916020885193849262461bcd60e51b84528260048501528051928391826024870152018585015e828201840152601f01601f19168101030190fd5b6060906104b7565b855162461bcd60e51b8152602060048201526016602482015275149bdd5d195c88185c1c1c9bdd985b0819985a5b195960521b6044820152606490fd5b6105e4915060203d6020116105ea575b6105dc8183610c2a565b810190610c60565b5f61045c565b503d6105d2565b87513d8b823e3d90fd5b865162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606490fd5b61064f915060203d6020116105ea576105dc8183610c2a565b5f610410565b88513d8c823e3d90fd5b61066c9199505f90610c2a565b5f975f6103d9565b88513d5f823e3d90fd5b5f80fd5b865162461bcd60e51b815260206004820152601460248201527311185a5b1e481b1a5b5a5d08195e18d95959195960621b6044820152606490fd5b875162461bcd60e51b815260206004820152601360248201527211185a5b1e481b1a5b5a5d081b9bdd081cd95d606a1b6044820152606490fd5b865162461bcd60e51b815260206004820152601b60248201527f416d6f756e74206578636565647320616374696f6e206c696d697400000000006044820152606490fd5b875162461bcd60e51b8152602060048201526013602482015272131a5ad948185b5bdd5b9d081b9bdd081cd95d606a1b6044820152606490fd5b6006602089516107858b82610c2a565b82815201651c9958d85cdd60d21b815220145f14610805576001600160a01b0381165f818152600560205288902054156107c9575f526005602052865f205461030f565b875162461bcd60e51b8152602060048201526015602482015274149958d85cdd08185b5bdd5b9d081b9bdd081cd95d605a1b6044820152606490fd5b865162461bcd60e51b8152602060048201526013602482015272496e76616c696420616374696f6e207479706560681b6044820152606490fd5b633ee5aeb560e01b5f5260045ffd5b3461067e57604036600319011261067e576001600160a01b0361086f610be6565b165f52600260205260405f206024355f52602052602060405f2054604051908152f35b3461067e575f36600319011261067e575f546040516001600160a01b039091168152602090f35b3461067e575f36600319011261067e576108d1610cb5565b6108d9610cdb565b5f805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b3461067e57604036600319011261067e57610932610be6565b61093a610cb5565b5f805460405163a9059cbb60e01b81526001600160a01b0391821660048201526024803590820152926020928492604492849291165af180156109975761097d57005b6109959060203d6020116105ea576105dc8183610c2a565b005b6040513d5f823e3d90fd5b3461067e575f36600319011261067e576109ba610cb5565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461067e575f36600319011261067e576020604051736131b5fae19ea4f9d964eac0408e4408b66337b58152f35b3461067e575f36600319011261067e57602060ff5f5460a01c166040519015158152f35b3461067e57602036600319011261067e576001600160a01b03610a6c610be6565b165f52600260205260405f206201518042045f52602052602060405f2054604051908152f35b3461067e575f36600319011261067e57610aaa610cb5565b5f5460ff8160a01c1615610aef5760ff60a01b19165f556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b638dfc202b60e01b5f5260045ffd5b3461067e575f36600319011261067e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461067e57602036600319011261067e576001600160a01b03610b63610be6565b165f526003602052602060405f2054604051908152f35b3461067e57602036600319011261067e576001600160a01b03610b9b610be6565b165f526004602052602060405f2054604051908152f35b3461067e57602036600319011261067e576020906001600160a01b03610bd6610be6565b165f526005825260405f20548152f35b600435906001600160a01b038216820361067e57565b9181601f8401121561067e5782359167ffffffffffffffff831161067e576020838186019501011161067e57565b90601f8019910116810190811067ffffffffffffffff821117610c4c57604052565b634e487b7160e01b5f52604160045260245ffd5b9081602091031261067e5751801515810361067e5790565b67ffffffffffffffff8111610c4c57601f01601f191660200190565b91908201809211610ca157565b634e487b7160e01b5f52601160045260245ffd5b5f546001600160a01b03163303610cc857565b63118cdaa760e01b5f523360045260245ffd5b60ff5f5460a01c16610ce957565b63d93c066560e01b5f5260045ffdfea2646970667358221220317b80e8310c18d21493202e4709b898028378c0fc9e563126ce8d26c2e3edcb64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x247F437 EQ PUSH2 0xBB2 JUMPI POP DUP1 PUSH4 0x231534D7 EQ PUSH2 0xB7A JUMPI DUP1 PUSH4 0x3113E93C EQ PUSH2 0xB42 JUMPI DUP1 PUSH4 0x3E413BEE EQ PUSH2 0xAFE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0xA92 JUMPI DUP1 PUSH4 0x5B8C9337 EQ PUSH2 0xA4B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0xA27 JUMPI DUP1 PUSH4 0x70A48572 EQ PUSH2 0x9F9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0x727B7ACF EQ PUSH2 0x919 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x8B9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x892 JUMPI DUP1 PUSH4 0x9061A57F EQ PUSH2 0x84E JUMPI DUP1 PUSH4 0x958E7387 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xD34AC1C3 EQ PUSH2 0x156 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0xCE JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x153 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x153 JUMPI PUSH2 0xE7 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0xEF PUSH2 0xCB5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x13F JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 OR DUP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x153 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x153 JUMPI PUSH2 0x170 PUSH2 0xBE6 JUMP JUMPDEST PUSH32 0x1D994BBBEEFA5B75B8CA7FDC56D35809C6916FFBF520F22CCB028E4740F198D PUSH1 0x60 PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP4 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x1A6 PUSH2 0xCB5 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP5 DUP6 DUP8 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 DUP9 KECCAK256 SSTORE DUP6 DUP8 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP9 KECCAK256 SSTORE DUP6 DUP8 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 DUP9 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG2 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x67E JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x208 PUSH2 0xBE6 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0xFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x67E JUMPI PUSH1 0xC4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x67E JUMPI PUSH2 0x23C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP5 SWAP1 PUSH1 0xE4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x67E JUMPI PUSH2 0x25E SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP2 PUSH2 0x267 PUSH2 0xCB5 JUMP JUMPDEST PUSH2 0x26F PUSH2 0xCDB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x83F JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE PUSH3 0x15180 TIMESTAMP DIV SWAP1 PUSH2 0x28E DUP5 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x29B PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xC2A JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 CALLDATASIZE DUP7 DUP7 ADD GT PUSH2 0x67E JUMPI DUP6 DUP6 DUP4 CALLDATACOPY PUSH0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE MLOAD SWAP1 KECCAK256 SWAP6 PUSH1 0x40 SWAP7 PUSH1 0x4 PUSH1 0x20 DUP10 MLOAD PUSH2 0x2CF DUP12 DUP3 PUSH2 0xC2A JUMP JUMPDEST DUP3 DUP2 MSTORE ADD PUSH4 0x6C696B65 PUSH1 0xE0 SHL DUP2 MSTORE KECCAK256 DUP2 EQ PUSH0 EQ PUSH2 0x775 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE DUP9 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x73B JUMPI PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE DUP7 PUSH0 KECCAK256 SLOAD JUMPDEST DUP7 GT PUSH2 0x6F7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE DUP8 SWAP1 KECCAK256 SLOAD SWAP1 SWAP8 SWAP1 DUP1 ISZERO PUSH2 0x6BD JUMPI DUP9 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE DUP8 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x352 DUP8 DUP10 PUSH0 KECCAK256 SLOAD PUSH2 0xC94 JUMP JUMPDEST GT PUSH2 0x682 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x67E JUMPI DUP8 MLOAD SWAP1 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP3 MSTORE DUP10 PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE DUP8 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xC4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0xE4 DUP2 DUP4 DUP7 GAS CALL DUP1 ISZERO PUSH2 0x674 JUMPI PUSH2 0x65F JUMPI JUMPDEST POP DUP7 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE DUP9 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP7 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP2 DUP14 DUP7 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x655 JUMPI DUP11 SWAP2 PUSH2 0x636 JUMPI JUMPDEST POP ISZERO PUSH2 0x5FB JUMPI PUSH1 0x20 DUP10 SWAP2 PUSH1 0x44 DUP10 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 MSTORE PUSH20 0x6131B5FAE19EA4F9D964EAC0408E4408B66337B5 PUSH1 0x4 DUP5 ADD MSTORE DUP12 PUSH1 0x24 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x5F1 JUMPI DUP10 SWAP2 PUSH2 0x5C2 JUMPI JUMPDEST POP ISZERO PUSH2 0x585 JUMPI DUP8 DUP10 DUP2 SWAP11 SWAP3 DUP3 SWAP4 DUP10 MLOAD SWAP3 DUP4 SWAP3 DUP4 CALLDATACOPY DUP2 ADD DUP4 DUP2 MSTORE SUB SWAP1 DUP3 PUSH20 0x6131B5FAE19EA4F9D964EAC0408E4408B66337B5 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x57D JUMPI RETURNDATASIZE SWAP1 PUSH2 0x4A0 DUP3 PUSH2 0xC78 JUMP JUMPDEST SWAP2 PUSH2 0x4AD DUP9 MLOAD SWAP4 DUP5 PUSH2 0xC2A JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE DUP10 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x53F JUMPI POP SWAP2 DUP1 PUSH32 0xDB2F68ABE9707696A4A1B20D3AD43E58CBBC37BF47B36C8B0B70E4A0291A30C6 SWAP6 SWAP5 SWAP3 PUSH1 0x80 SWAP5 DUP9 DUP11 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE DUP7 DUP11 KECCAK256 SWAP1 DUP11 MSTORE PUSH1 0x20 MSTORE DUP6 DUP10 KECCAK256 PUSH2 0x505 DUP6 DUP3 SLOAD PUSH2 0xC94 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x60 DUP7 MLOAD SWAP7 DUP8 SWAP6 DUP7 MSTORE DUP11 PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD MSTORE DUP2 PUSH1 0x60 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY DUP2 DUP2 ADD DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 LOG3 PUSH1 0x1 DUP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x44 DUP9 SWAP2 PUSH1 0x20 DUP9 MLOAD SWAP4 DUP5 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE DUP3 PUSH1 0x4 DUP6 ADD MSTORE DUP1 MLOAD SWAP3 DUP4 SWAP2 DUP3 PUSH1 0x24 DUP8 ADD MSTORE ADD DUP6 DUP6 ADD MCOPY DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x4B7 JUMP JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x149BDD5D195C88185C1C1C9BDD985B0819985A5B1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x5E4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5EA JUMPI JUMPDEST PUSH2 0x5DC DUP2 DUP4 PUSH2 0xC2A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH0 PUSH2 0x45C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5D2 JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1554D110C81D1C985B9CD9995C8819985A5B1959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x64F SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5EA JUMPI PUSH2 0x5DC DUP2 DUP4 PUSH2 0xC2A JUMP JUMPDEST PUSH0 PUSH2 0x410 JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP13 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x66C SWAP2 SWAP10 POP PUSH0 SWAP1 PUSH2 0xC2A JUMP JUMPDEST PUSH0 SWAP8 PUSH0 PUSH2 0x3D9 JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x11185A5B1E481B1A5B5A5D08195E18D959591959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x11185A5B1E481B1A5B5A5D081B9BDD081CD95D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74206578636565647320616374696F6E206C696D69740000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x131A5AD948185B5BDD5B9D081B9BDD081CD95D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x20 DUP10 MLOAD PUSH2 0x785 DUP12 DUP3 PUSH2 0xC2A JUMP JUMPDEST DUP3 DUP2 MSTORE ADD PUSH6 0x1C9958D85CDD PUSH1 0xD2 SHL DUP2 MSTORE KECCAK256 EQ PUSH0 EQ PUSH2 0x805 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP9 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x7C9 JUMPI PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP7 PUSH0 KECCAK256 SLOAD PUSH2 0x30F JUMP JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x149958D85CDD08185B5BDD5B9D081B9BDD081CD95D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E76616C696420616374696F6E2074797065 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x86F PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x8D1 PUSH2 0xCB5 JUMP JUMPDEST PUSH2 0x8D9 PUSH2 0xCDB JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x932 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x93A PUSH2 0xCB5 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 CALLDATALOAD SWAP1 DUP3 ADD MSTORE SWAP3 PUSH1 0x20 SWAP3 DUP5 SWAP3 PUSH1 0x44 SWAP3 DUP5 SWAP3 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0x997 JUMPI PUSH2 0x97D JUMPI STOP JUMPDEST PUSH2 0x995 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5EA JUMPI PUSH2 0x5DC DUP2 DUP4 PUSH2 0xC2A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0x9BA PUSH2 0xCB5 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0x6131B5FAE19EA4F9D964EAC0408E4408B66337B5 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x20 PUSH1 0xFF PUSH0 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xA6C PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH3 0x15180 TIMESTAMP DIV PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH2 0xAAA PUSH2 0xCB5 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND ISZERO PUSH2 0xAEF JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH0 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH4 0x8DFC202B PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB63 PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB9B PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x67E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x67E JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBD6 PUSH2 0xBE6 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x67E JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x67E JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x67E JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x67E JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xC4C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x67E JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x67E JUMPI SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC4C JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xCA1 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xCC8 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0xFF PUSH0 SLOAD PUSH1 0xA0 SHR AND PUSH2 0xCE9 JUMPI JUMP JUMPDEST PUSH4 0xD93C0665 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE PUSH28 0x80E8310C18D21493202E4709B898028378C0FC9E563126CE8D26C2E3 0xED 0xCB PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "771:4946:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;-1:-1:-1;;;;;771:4946:6;2627:22:0;;2623:91;;771:4946:6;;-1:-1:-1;;;;;;771:4946:6;;;;;;-1:-1:-1;;;;;771:4946:6;3052:40:0;771:4946:6;;3052:40:0;771:4946:6;;2623:91:0;-1:-1:-1;;;2672:31:0;;771:4946:6;;;;;2672:31:0;;771:4946:6;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;;;:::i;:::-;5025:59;771:4946;;;;;;;;1500:62:0;;;:::i;:::-;771:4946:6;;;;;;;;;;4884:14;771:4946;;;;;;;;;;;;;;;;;;;;;4967:12;771:4946;;;;;;;;;;;;;;;;;;;;5025:59;771:4946;;;;;;;;;-1:-1:-1;;771:4946:6;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;1500:62:0;;;:::i;:::-;1315:72:4;;:::i;:::-;1899:1:5;771:4946:6;;2702:18:5;2698:86;;1899:1;771:4946:6;;2515:5;2497:15;771:4946;2550:17;771:4946;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;2607:28;;771:4946;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;771:4946:6;;2663:24;2649:38;;2645:400;771:4946;;;-1:-1:-1;;;;;;771:4946:6;;;;;;;;;;;;;2711:20;771:4946;;;;;;;;;;;2645:400;3071:23;;771:4946;;-1:-1:-1;;;;;771:4946:6;;;;;3190:14;771:4946;;;;;;;;;3228:9;;771:4946;;;;;1899:1:5;771:4946:6;;;;;;;;;;3279:36;771:4946;;;;;3279:36;:::i;:::-;:45;771:4946;;3459:4;-1:-1:-1;;;;;771:4946:6;;3438:180;;;;;771:4946;;;;;;3438:180;;;771:4946;3438:180;;771:4946;3512:4;771:4946;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3438:180;771:4946;3438:180;;;;;;;;;;;2645:400;771:4946;;;;;;3710:50;;;771:4946;3710:50;;771:4946;3512:4;771:4946;;;;;;;;;;3710:50;771:4946;3710:50;;;;;;;;;;;;;;2645:400;771:4946;;;;;;;;;;;;;;;;;3886:42;;960;771:4946;3886:42;;771:4946;;;;;;3886:42;;;;;;;;;;;2645:400;771:4946;;;;;;;;;;;;;;;;;;;;;;;4068:31;;;960:42;4068:31;;771:4946;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4412:231;771:4946;;;;;;;;1899:1:5;771:4946:6;;;;;;;;;;;;;4193:37;771:4946;;;4193:37;:::i;:::-;771:4946;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;4412:231;;;;771:4946;;;;;;;;;;;;3005:29;;;;;;771:4946;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;3886:42;;;;771:4946;3886:42;771:4946;3886:42;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;771:4946;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;3710:50;;;;771:4946;3710:50;771:4946;3710:50;;;;;;;:::i;:::-;;;;;771:4946;;;;;;;;;3438:180;;;;;771:4946;3438:180;;:::i;:::-;771:4946;3438:180;;;;;771:4946;;;;;;;;;3438:180;771:4946;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;2645:400;771:4946;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;771:4946:6;;2832:26;2818:40;2814:231;771:4946;;;-1:-1:-1;;;;;771:4946:6;;;;;;2882:12;771:4946;;;;;;2882:22;771:4946;;;;2882:12;771:4946;;;;;;2645:400;;771:4946;;;-1:-1:-1;;;771:4946:6;;;;;;;;;;;;-1:-1:-1;;;771:4946:6;;;;;;;2814:231;771:4946;;-1:-1:-1;;;3005:29:6;;771:4946;;3005:29;;771:4946;;;;;;-1:-1:-1;;;771:4946:6;;;;;;3005:29;2698:86:5;2743:30;;;771:4946:6;2743:30:5;771:4946:6;;2743:30:5;771:4946:6;;;;;;-1:-1:-1;;771:4946:6;;;;-1:-1:-1;;;;;771:4946:6;;:::i;:::-;;;;1049:65;771:4946;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;;;;;-1:-1:-1;;;;;771:4946:6;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;1500:62:0;;:::i;:::-;1315:72:4;;:::i;:::-;771:4946:6;;;-1:-1:-1;;;;771:4946:6;-1:-1:-1;;;771:4946:6;;;;;735:10:3;771:4946:6;;2427:20:4;;771:4946:6;;2427:20:4;771:4946:6;;;;;;;-1:-1:-1;;771:4946:6;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;771:4946:6;;;;;-1:-1:-1;;;5669:39:6;;-1:-1:-1;;;;;771:4946:6;;;;5669:39;;771:4946;;;;;;;;;;;;;;;;;;;5669:39;;;;;;;;771:4946;5669:39;;;771:4946;5669:39;771:4946;5669:39;;;;;;;:::i;:::-;771:4946;5669:39;771:4946;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;1500:62:0;;:::i;:::-;771:4946:6;;;-1:-1:-1;;;;;;771:4946:6;;;;-1:-1:-1;;;;;771:4946:6;3052:40:0;771:4946:6;;3052:40:0;771:4946:6;;;;;;;-1:-1:-1;;771:4946:6;;;;;;;960:42;771:4946;;;;;;;;;-1:-1:-1;;771:4946:6;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;-1:-1:-1;;;;;771:4946:6;;:::i;:::-;;;;5295:10;771:4946;;;;;5273:5;5255:15;771:4946;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;1500:62:0;;:::i;:::-;771:4946:6;;;;;;;2140:9:4;2136:62;;-1:-1:-1;;;;771:4946:6;;;;;735:10:3;771:4946:6;;2674:22:4;;771:4946:6;;2674:22:4;771:4946:6;2136:62:4;2172:15;;;771:4946:6;2172:15:4;771:4946:6;;2172:15:4;771:4946:6;;;;;;-1:-1:-1;;771:4946:6;;;;;;851:28;-1:-1:-1;;;;;771:4946:6;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;-1:-1:-1;;;;;771:4946:6;;:::i;:::-;;;;1145:49;771:4946;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;-1:-1:-1;;;;;771:4946:6;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;771:4946:6;;;;;;-1:-1:-1;;;;;771:4946:6;;:::i;:::-;;;;1251:47;771:4946;;;;;;;;;;;;;-1:-1:-1;;;;;771:4946:6;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;771:4946:6;;;;;-1:-1:-1;771:4946:6;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;771:4946:6;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;1796:162:0;1710:6;771:4946:6;-1:-1:-1;;;;;771:4946:6;735:10:3;1855:23:0;1851:101;;1796:162::o;1851:101::-;1901:40;;;1710:6;1901:40;735:10:3;1901:40:0;771:4946:6;;1710:6:0;1901:40;1878:128:4;771:4946:6;1796:7:4;771:4946:6;;;;1939:61:4;;1878:128::o;1939:61::-;1974:15;;;1796:7;1974:15;;1796:7;1974:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "674800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"KYBERSWAP_ROUTER()": "312",
								"dailySpent(address,uint256)": "2739",
								"emergencyRecovery(address,uint256)": "infinite",
								"executePermitAutoBuy(address,uint256,uint256,uint8,bytes32,bytes32,bytes,string)": "infinite",
								"getDailySpent(address)": "2589",
								"likeAmount(address)": "2433",
								"owner()": "2526",
								"pause()": "29940",
								"paused()": "2410",
								"recastAmount(address)": "2403",
								"renounceOwnership()": "28231",
								"setUserLimits(address,uint256,uint256,uint256)": "71185",
								"transferOwnership(address)": "28500",
								"unpause()": "27672",
								"usdc()": "infinite",
								"userDailyLimit(address)": "2455"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "A0"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP5",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SLT",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 771,
									"end": 5717,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 771,
									"end": 5717,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "tag",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 1857,
									"end": 1858,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1857,
									"end": 1858,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1857,
									"end": 1858,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1737,
									"end": 1757,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1737,
									"end": 1757,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1737,
									"end": 1757,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "ASSIGNIMMUTABLE",
									"source": 6,
									"value": "485"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "RETURN",
									"source": 6
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF7"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "tag",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "tag",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B71"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "E0"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SHL",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "41"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 771,
									"end": 5717,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 771,
									"end": 5717,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220317b80e8310c18d21493202e4709b898028378c0fc9e563126ce8d26c2e3edcb64736f6c634300081e0033",
									".code": [
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "247F437"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "231534D7"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "3113E93C"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "3E413BEE"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "3F4BA83A"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "5B8C9337"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "5C975ABB"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "70A48572"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "727B7ACF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "8456CB59"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "9061A57F"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "958E7387"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "D34AC1C3"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5025,
											"end": 5084,
											"name": "PUSH",
											"source": 6,
											"value": "1D994BBBEEFA5B75B8CA7FDC56D35809C6916FFBF520F22CCB028E4740F198D"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4884,
											"end": 4898,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4967,
											"end": 4979,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5025,
											"end": 5084,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "C4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 2720,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2520,
											"name": "PUSH",
											"source": 6,
											"value": "15180"
										},
										{
											"begin": 2497,
											"end": 2512,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2550,
											"end": 2567,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2607,
											"end": 2635,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2607,
											"end": 2635,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP12",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6C696B65"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2663,
											"end": 2687,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2649,
											"end": 2687,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2649,
											"end": 2687,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2711,
											"end": 2731,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3071,
											"end": 3094,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3071,
											"end": 3094,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3190,
											"end": 3204,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3228,
											"end": 3237,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3228,
											"end": 3237,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3279,
											"end": 3315,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3279,
											"end": 3315,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 3279,
											"end": 3315,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3279,
											"end": 3315,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 3279,
											"end": 3315,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3279,
											"end": 3324,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3459,
											"end": 3463,
											"name": "PUSHIMMUTABLE",
											"source": 6,
											"value": "485"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "D505ACCF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3512,
											"end": 3516,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "A4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "A4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "C4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E4"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "tag",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "23B872DD"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3512,
											"end": 3516,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP14",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "tag",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "95EA7B3"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 960,
											"end": 1002,
											"name": "PUSH",
											"source": 6,
											"value": "6131B5FAE19EA4F9D964EAC0408E4408B66337B5"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP12",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP11",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4068,
											"end": 4099,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4068,
											"end": 4099,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4068,
											"end": 4099,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 960,
											"end": 1002,
											"name": "PUSH",
											"source": 6,
											"value": "6131B5FAE19EA4F9D964EAC0408E4408B66337B5"
										},
										{
											"begin": 4068,
											"end": 4099,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 4068,
											"end": 4099,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4412,
											"end": 4643,
											"name": "PUSH",
											"source": 6,
											"value": "DB2F68ABE9707696A4A1B20D3AD43E58CBBC37BF47B36C8B0B70E4A0291A30C6"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4193,
											"end": 4230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4193,
											"end": 4230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 4193,
											"end": 4230,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4193,
											"end": 4230,
											"name": "tag",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 4193,
											"end": 4230,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4412,
											"end": 4643,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4412,
											"end": 4643,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4412,
											"end": 4643,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4412,
											"end": 4643,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "PUSH",
											"source": 6,
											"value": "461BCD"
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "PUSH",
											"source": 6,
											"value": "E5"
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MCOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "149BDD5D195C88185C1C1C9BDD985B0819985A5B1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "52"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "tag",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "tag",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3886,
											"end": 3928,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3886,
											"end": 3928,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "tag",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 3886,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP12",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1554D110C81D1C985B9CD9995C8819985A5B1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "tag",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3710,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 3710,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP13",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "SWAP10",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3438,
											"end": 3618,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "SWAP8",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 3438,
											"end": 3618,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "11185A5B1E481B1A5B5A5D08195E18D959591959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "11185A5B1E481B1A5B5A5D081B9BDD081CD95D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1B"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "416D6F756E74206578636565647320616374696F6E206C696D69740000000000"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "131A5AD948185B5BDD5B9D081B9BDD081CD95D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "tag",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP12",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C9958D85CDD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2832,
											"end": 2858,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2818,
											"end": 2858,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2814,
											"end": 3045,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2882,
											"end": 2894,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2882,
											"end": 2904,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2882,
											"end": 2894,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 2645,
											"end": 3045,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "149958D85CDD08185B5BDD5B9D081B9BDD081CD95D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2814,
											"end": 3045,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 2814,
											"end": 3045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E76616C696420616374696F6E2074797065"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3005,
											"end": 3034,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 5,
											"value": "3EE5AEB5"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1049,
											"end": 1114,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2427,
											"end": 2447,
											"name": "PUSH",
											"source": 4,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 2427,
											"end": 2447,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2427,
											"end": 2447,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5669,
											"end": 5708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 5669,
											"end": 5708,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 960,
											"end": 1002,
											"name": "PUSH",
											"source": 6,
											"value": "6131B5FAE19EA4F9D964EAC0408E4408B66337B5"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5295,
											"end": 5305,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5273,
											"end": 5278,
											"name": "PUSH",
											"source": 6,
											"value": "15180"
										},
										{
											"begin": 5255,
											"end": 5270,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2140,
											"end": 2149,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2674,
											"end": 2696,
											"name": "PUSH",
											"source": 4,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 2674,
											"end": 2696,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2674,
											"end": 2696,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "tag",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "PUSH",
											"source": 4,
											"value": "8DFC202B"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 851,
											"end": 879,
											"name": "PUSHIMMUTABLE",
											"source": 6,
											"value": "485"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1145,
											"end": 1194,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "198"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "198"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1251,
											"end": 1298,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA7"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1878,
											"end": 2006,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1878,
											"end": 2006,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 771,
											"end": 5717,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2006,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "tag",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "PUSH",
											"source": 4,
											"value": "D93C0665"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ReentrancyGuard.sol",
								"PermitInvestre.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"KYBERSWAP_ROUTER()": "70a48572",
							"dailySpent(address,uint256)": "9061a57f",
							"emergencyRecovery(address,uint256)": "727b7acf",
							"executePermitAutoBuy(address,uint256,uint256,uint8,bytes32,bytes32,bytes,string)": "958e7387",
							"getDailySpent(address)": "5b8c9337",
							"likeAmount(address)": "231534d7",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"recastAmount(address)": "0247f437",
							"renounceOwnership()": "715018a6",
							"setUserLimits(address,uint256,uint256,uint256)": "d34ac1c3",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a",
							"usdc()": "3e413bee",
							"userDailyLimit(address)": "3113e93c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionType\",\"type\":\"string\"}],\"name\":\"PermitAutoBuyExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"likeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recastAmount\",\"type\":\"uint256\"}],\"name\":\"UserLimitsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KYBERSWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailySpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"actionType\",\"type\":\"string\"}],\"name\":\"executePermitAutoBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDailySpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"likeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recastAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_likeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recastAmount\",\"type\":\"uint256\"}],\"name\":\"setUserLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract that accepts EIP-2612 permits and executes swaps atomically  Users grant permits to this contract, then the contract: 1. Uses permit to transfer USDC from user 2. Approves DEX router for USDC spending 3. Executes swap via router 4. Sends received tokens directly to user  This eliminates the need for backend wallet to hold user funds\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"emergencyRecovery(address,uint256)\":{\"details\":\"Emergency token recovery\"},\"executePermitAutoBuy(address,uint256,uint256,uint8,bytes32,bytes32,bytes,string)\":{\"details\":\"Execute auto-buy using EIP-2612 permit\",\"params\":{\"actionType\":\"\\\"like\\\" or \\\"recast\\\"\",\"deadline\":\"Permit deadline\",\"swapData\":\"Encoded swap transaction data for DEX router\",\"usdcAmount\":\"Amount of USDC to spend\",\"user\":\"User's wallet address\",\"v\":\",r,s Permit signature components\"}},\"getDailySpent(address)\":{\"details\":\"Get current daily spent amount\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Emergency functions\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setUserLimits(address,uint256,uint256,uint256)\":{\"details\":\"Set user limits and amounts\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PermitAutoBuyContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"PermitInvestre.sol\":\"PermitAutoBuyContract\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x2fa0657dd7b8bc75475a47f64bc04a9adb42236b15d65e6781594ea69a46c3e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7496f42681aed94bf0142a077324e50b86046610c1724e7c12e96cf1c365914a\",\"dweb:/ipfs/QmZvhNdSAAbN4PKPdheAqwpXukUiXp3Q3TdQccDMg2NDTV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9d6f6f6600a2bec622f699081b58350873b5e63ce05464d17d674a290bb8a7c\",\"dweb:/ipfs/QmQKVzSQY1PM3Bid4QhgVVZyx6B4Jx7XgaQzLKHj38vJz8\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"PermitInvestre.sol\":{\"keccak256\":\"0xe1414c3f81672da2aa64975f4039ae9c2ad7c13a245f8970a427009f2af8cb8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ee5b508b7b8771ce4aa4c83fd2befe3a5ed1bd239dd79a89116e9e218191b4d7\",\"dweb:/ipfs/QmYCZukJVDLWifRdcvw4z9maGt3L7WDoiy6oUFcGT39g4o\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "PermitInvestre.sol:PermitAutoBuyContract",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 300,
								"contract": "PermitInvestre.sol:PermitAutoBuyContract",
								"label": "_paused",
								"offset": 20,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 410,
								"contract": "PermitInvestre.sol:PermitAutoBuyContract",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 494,
								"contract": "PermitInvestre.sol:PermitAutoBuyContract",
								"label": "dailySpent",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
							},
							{
								"astId": 498,
								"contract": "PermitInvestre.sol:PermitAutoBuyContract",
								"label": "userDailyLimit",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 502,
								"contract": "PermitInvestre.sol:PermitAutoBuyContract",
								"label": "likeAmount",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 506,
								"contract": "PermitInvestre.sol:PermitAutoBuyContract",
								"label": "recastAmount",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							291
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 292,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 291,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 291,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								291
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 273,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 273,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							225
						]
					},
					"id": 226,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 150,
								"nodeType": "StructuredDocumentation",
								"src": "133:71:1",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 225,
							"linearizedBaseContracts": [
								225
							],
							"name": "IERC20",
							"nameLocation": "215:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "228:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 159,
									"name": "Transfer",
									"nameLocation": "397:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "422:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "406:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "406:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "444:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "428:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "456:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "448:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "405:57:1"
									},
									"src": "391:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "469:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 168,
									"name": "Approval",
									"nameLocation": "628:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "653:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "637:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "676:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "660:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "693:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "685:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "636:63:1"
									},
									"src": "622:78:1"
								},
								{
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "706:65:1",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 174,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "785:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "796:2:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "822:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:9:1"
									},
									"scope": 225,
									"src": "776:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "837:71:1",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "922:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "940:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "932:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "931:17:1"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "972:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:9:1"
									},
									"scope": 225,
									"src": "913:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "987:213:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1214:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1231:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1223:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1243:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1235:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1235:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:27:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1268:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:1"
									},
									"scope": 225,
									"src": "1205:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 202,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "1568:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "1583:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:1"
									},
									"returnParameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "1623:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:1"
									},
									"scope": 225,
									"src": "1549:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "1638:667:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 212,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2319:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2335:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2327:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 204,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2327:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2352:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2344:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 206,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2344:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2326:32:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2377:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 209,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:6:1"
									},
									"scope": 225,
									"src": "2310:73:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2389:297:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 224,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2700:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2721:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "2713:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2713:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2735:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "2727:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2747:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "2739:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2739:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2712:41:1"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "2772:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 221,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2772:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2771:6:1"
									},
									"scope": 225,
									"src": "2691:87:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 226,
							"src": "205:2575:1",
							"usedErrors": [],
							"usedEvents": [
								159,
								168
							]
						}
					],
					"src": "106:2675:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							261
						]
					},
					"id": 262,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 227,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "123:25:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 228,
								"nodeType": "StructuredDocumentation",
								"src": "150:1965:2",
								"text": " @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 261,
							"linearizedBaseContracts": [
								261
							],
							"name": "IERC20Permit",
							"nameLocation": "2126:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "2145:850:2",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3009:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3033:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3025:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3025:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3056:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3048:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3048:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3081:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3073:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3073:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3104:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3096:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3096:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3128:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3122:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 238,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3122:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3147:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3139:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 240,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3139:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3166:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3158:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 242,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3158:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3015:158:2"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3182:0:2"
									},
									"scope": 261,
									"src": "3000:183:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 247,
										"nodeType": "StructuredDocumentation",
										"src": "3189:294:2",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 254,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3497:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3512:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "3504:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3504:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3503:15:2"
									},
									"returnParameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "3542:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3542:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3541:9:2"
									},
									"scope": 261,
									"src": "3488:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "3557:128:2",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 260,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3752:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3768:2:2"
									},
									"returnParameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "3794:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 257,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3794:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3793:9:2"
									},
									"scope": 261,
									"src": "3743:60:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 262,
							"src": "2116:1689:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3683:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							291
						]
					},
					"id": 292,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 263,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:3"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 264,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 291,
							"linearizedBaseContracts": [
								291
							],
							"name": "Context",
							"nameLocation": "642:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 272,
										"nodeType": "Block",
										"src": "718:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 269,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:3",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 268,
												"id": 271,
												"nodeType": "Return",
												"src": "728:17:3"
											}
										]
									},
									"id": 273,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:3"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "709:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 266,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:3"
									},
									"scope": 291,
									"src": "656:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 281,
										"nodeType": "Block",
										"src": "825:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 278,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:3",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 277,
												"id": 280,
												"nodeType": "Return",
												"src": "835:15:3"
											}
										]
									},
									"id": 282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:3"
									},
									"returnParameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "809:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 275,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:3"
									},
									"scope": 291,
									"src": "758:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 289,
										"nodeType": "Block",
										"src": "935:25:3",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 286,
												"id": 288,
												"nodeType": "Return",
												"src": "945:8:3"
											}
										]
									},
									"id": 290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:3"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:3"
									},
									"scope": 291,
									"src": "863:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 292,
							"src": "624:338:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							291
						],
						"Pausable": [
							399
						]
					},
					"id": 400,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 293,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 295,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 400,
							"sourceUnit": 292,
							"src": "128:45:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 294,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 291,
										"src": "136:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 297,
										"name": "Context",
										"nameLocations": [
											"645:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 291,
										"src": "645:7:4"
									},
									"id": 298,
									"nodeType": "InheritanceSpecifier",
									"src": "645:7:4"
								}
							],
							"canonicalName": "Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 296,
								"nodeType": "StructuredDocumentation",
								"src": "175:439:4",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 399,
							"linearizedBaseContracts": [
								399,
								291
							],
							"name": "Pausable",
							"nameLocation": "633:8:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 300,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "672:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 399,
									"src": "659:20:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 299,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "659:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "686:73:4",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 305,
									"name": "Paused",
									"nameLocation": "770:6:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "785:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "777:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "777:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:17:4"
									},
									"src": "764:30:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "800:70:4",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 310,
									"name": "Unpaused",
									"nameLocation": "881:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "898:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "890:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:17:4"
									},
									"src": "875:32:4"
								},
								{
									"documentation": {
										"id": 311,
										"nodeType": "StructuredDocumentation",
										"src": "913:76:4",
										"text": " @dev The operation failed because the contract is paused."
									},
									"errorSelector": "d93c0665",
									"id": 313,
									"name": "EnforcedPause",
									"nameLocation": "1000:13:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:2:4"
									},
									"src": "994:22:4"
								},
								{
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "1022:80:4",
										"text": " @dev The operation failed because the contract is not paused."
									},
									"errorSelector": "8dfc202b",
									"id": 316,
									"name": "ExpectedPause",
									"nameLocation": "1113:13:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:2:4"
									},
									"src": "1107:22:4"
								},
								{
									"body": {
										"id": 323,
										"nodeType": "Block",
										"src": "1340:47:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 319,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 353,
														"src": "1350:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1350:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "1350:19:4"
											},
											{
												"id": 322,
												"nodeType": "PlaceholderStatement",
												"src": "1379:1:4"
											}
										]
									},
									"documentation": {
										"id": 317,
										"nodeType": "StructuredDocumentation",
										"src": "1135:175:4",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 324,
									"name": "whenNotPaused",
									"nameLocation": "1324:13:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1337:2:4"
									},
									"src": "1315:72:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 331,
										"nodeType": "Block",
										"src": "1587:44:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 327,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 366,
														"src": "1597:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1597:16:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 329,
												"nodeType": "ExpressionStatement",
												"src": "1597:16:4"
											},
											{
												"id": 330,
												"nodeType": "PlaceholderStatement",
												"src": "1623:1:4"
											}
										]
									},
									"documentation": {
										"id": 325,
										"nodeType": "StructuredDocumentation",
										"src": "1393:167:4",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 332,
									"name": "whenPaused",
									"nameLocation": "1574:10:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1584:2:4"
									},
									"src": "1565:66:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "1779:31:4",
										"statements": [
											{
												"expression": {
													"id": 338,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 300,
													"src": "1796:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 337,
												"id": 339,
												"nodeType": "Return",
												"src": "1789:14:4"
											}
										]
									},
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "1637:84:4",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1735:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1741:2:4"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "1773:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 335,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1773:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:6:4"
									},
									"scope": 399,
									"src": "1726:84:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 352,
										"nodeType": "Block",
										"src": "1929:77:4",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 345,
														"name": "paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "1943:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1943:8:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 351,
												"nodeType": "IfStatement",
												"src": "1939:61:4",
												"trueBody": {
													"id": 350,
													"nodeType": "Block",
													"src": "1953:47:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 347,
																	"name": "EnforcedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 313,
																	"src": "1974:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 348,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1974:15:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 349,
															"nodeType": "RevertStatement",
															"src": "1967:22:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "1816:57:4",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "1887:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1904:2:4"
									},
									"returnParameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1929:0:4"
									},
									"scope": 399,
									"src": "1878:128:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 365,
										"nodeType": "Block",
										"src": "2126:78:4",
										"statements": [
											{
												"condition": {
													"id": 359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2140:9:4",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 357,
															"name": "paused",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "2141:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 358,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2141:8:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 364,
												"nodeType": "IfStatement",
												"src": "2136:62:4",
												"trueBody": {
													"id": 363,
													"nodeType": "Block",
													"src": "2151:47:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 360,
																	"name": "ExpectedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 316,
																	"src": "2172:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 361,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2172:15:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 362,
															"nodeType": "RevertStatement",
															"src": "2165:22:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "2012:61:4",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 366,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "2087:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2101:2:4"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2126:0:4"
									},
									"scope": 399,
									"src": "2078:126:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "2388:66:4",
										"statements": [
											{
												"expression": {
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 372,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 300,
														"src": "2398:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 373,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2408:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2398:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 375,
												"nodeType": "ExpressionStatement",
												"src": "2398:14:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 377,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 273,
																"src": "2434:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2434:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 376,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "2427:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2427:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 380,
												"nodeType": "EmitStatement",
												"src": "2422:25:4"
											}
										]
									},
									"documentation": {
										"id": 367,
										"nodeType": "StructuredDocumentation",
										"src": "2210:124:4",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 370,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 369,
												"name": "whenNotPaused",
												"nameLocations": [
													"2374:13:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 324,
												"src": "2374:13:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "2374:13:4"
										}
									],
									"name": "_pause",
									"nameLocation": "2348:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2354:2:4"
									},
									"returnParameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2388:0:4"
									},
									"scope": 399,
									"src": "2339:115:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 397,
										"nodeType": "Block",
										"src": "2634:69:4",
										"statements": [
											{
												"expression": {
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 388,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 300,
														"src": "2644:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 389,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2654:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2644:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 391,
												"nodeType": "ExpressionStatement",
												"src": "2644:15:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 393,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 273,
																"src": "2683:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2683:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 392,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 310,
														"src": "2674:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2674:22:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 396,
												"nodeType": "EmitStatement",
												"src": "2669:27:4"
											}
										]
									},
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "2460:121:4",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 398,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 386,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 385,
												"name": "whenPaused",
												"nameLocations": [
													"2623:10:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 332,
												"src": "2623:10:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "2623:10:4"
										}
									],
									"name": "_unpause",
									"nameLocation": "2595:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2603:2:4"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2634:0:4"
									},
									"scope": 399,
									"src": "2586:117:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 400,
							"src": "615:2090:4",
							"usedErrors": [
								313,
								316
							],
							"usedEvents": [
								305,
								310
							]
						}
					],
					"src": "102:2604:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							468
						]
					},
					"id": 469,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 401,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 402,
								"nodeType": "StructuredDocumentation",
								"src": "135:894:5",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 468,
							"linearizedBaseContracts": [
								468
							],
							"name": "ReentrancyGuard",
							"nameLocation": "1048:15:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 405,
									"mutability": "constant",
									"name": "NOT_ENTERED",
									"nameLocation": "1843:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 468,
									"src": "1818:40:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 403,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1818:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 404,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1857:1:5",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 408,
									"mutability": "constant",
									"name": "ENTERED",
									"nameLocation": "1889:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 468,
									"src": "1864:36:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 406,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1864:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 407,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1899:1:5",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 410,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1923:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 468,
									"src": "1907:23:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 409,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1907:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "1937:52:5",
										"text": " @dev Unauthorized reentrant call."
									},
									"errorSelector": "3ee5aeb5",
									"id": 413,
									"name": "ReentrancyGuardReentrantCall",
									"nameLocation": "2000:28:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2028:2:5"
									},
									"src": "1994:37:5"
								},
								{
									"body": {
										"id": 420,
										"nodeType": "Block",
										"src": "2051:38:5",
										"statements": [
											{
												"expression": {
													"id": 418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 416,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 410,
														"src": "2061:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 417,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "2071:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2061:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 419,
												"nodeType": "ExpressionStatement",
												"src": "2061:21:5"
											}
										]
									},
									"id": 421,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2048:2:5"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2051:0:5"
									},
									"scope": 468,
									"src": "2037:52:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 431,
										"nodeType": "Block",
										"src": "2490:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 424,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 448,
														"src": "2500:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2500:21:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 426,
												"nodeType": "ExpressionStatement",
												"src": "2500:21:5"
											},
											{
												"id": 427,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:5"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 428,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 456,
														"src": "2542:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2542:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "2542:20:5"
											}
										]
									},
									"documentation": {
										"id": 422,
										"nodeType": "StructuredDocumentation",
										"src": "2095:366:5",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 432,
									"name": "nonReentrant",
									"nameLocation": "2475:12:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2487:2:5"
									},
									"src": "2466:103:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 447,
										"nodeType": "Block",
										"src": "2614:268:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 435,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 410,
														"src": "2702:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 436,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "2713:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2702:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 442,
												"nodeType": "IfStatement",
												"src": "2698:86:5",
												"trueBody": {
													"id": 441,
													"nodeType": "Block",
													"src": "2722:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 438,
																	"name": "ReentrancyGuardReentrantCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 413,
																	"src": "2743:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 439,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2743:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 440,
															"nodeType": "RevertStatement",
															"src": "2736:37:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 443,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 410,
														"src": "2858:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 444,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "2868:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2858:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "2858:17:5"
											}
										]
									},
									"id": 448,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2584:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2603:2:5"
									},
									"returnParameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2614:0:5"
									},
									"scope": 468,
									"src": "2575:307:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 455,
										"nodeType": "Block",
										"src": "2926:170:5",
										"statements": [
											{
												"expression": {
													"id": 453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 451,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 410,
														"src": "3068:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 452,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "3078:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3068:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 454,
												"nodeType": "ExpressionStatement",
												"src": "3068:21:5"
											}
										]
									},
									"id": 456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2897:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2915:2:5"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2926:0:5"
									},
									"scope": 468,
									"src": "2888:208:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 466,
										"nodeType": "Block",
										"src": "3339:42:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 462,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 410,
														"src": "3356:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 463,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "3367:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3356:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 461,
												"id": 465,
												"nodeType": "Return",
												"src": "3349:25:5"
											}
										]
									},
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "3102:168:5",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3284:23:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3307:2:5"
									},
									"returnParameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "3333:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 459,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3333:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:6:5"
									},
									"scope": 468,
									"src": "3275:106:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 469,
							"src": "1030:2353:5",
							"usedErrors": [
								413
							],
							"usedEvents": []
						}
					],
					"src": "109:3275:5"
				},
				"id": 5
			},
			"PermitInvestre.sol": {
				"ast": {
					"absolutePath": "PermitInvestre.sol",
					"exportedSymbols": {
						"Context": [
							291
						],
						"IERC20": [
							225
						],
						"IERC20Permit": [
							261
						],
						"Ownable": [
							147
						],
						"Pausable": [
							399
						],
						"PermitAutoBuyContract": [
							858
						],
						"ReentrancyGuard": [
							468
						]
					},
					"id": 859,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 470,
							"literals": [
								"solidity",
								"0.8",
								".30"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 471,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 859,
							"sourceUnit": 226,
							"src": "57:56:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"id": 472,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 859,
							"sourceUnit": 262,
							"src": "114:73:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 473,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 859,
							"sourceUnit": 148,
							"src": "188:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
							"file": "@openzeppelin/contracts/utils/Pausable.sol",
							"id": 474,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 859,
							"sourceUnit": 400,
							"src": "241:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"id": 475,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 859,
							"sourceUnit": 469,
							"src": "294:59:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 477,
										"name": "Ownable",
										"nameLocations": [
											"805:7:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "805:7:6"
									},
									"id": 478,
									"nodeType": "InheritanceSpecifier",
									"src": "805:7:6"
								},
								{
									"baseName": {
										"id": 479,
										"name": "Pausable",
										"nameLocations": [
											"814:8:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 399,
										"src": "814:8:6"
									},
									"id": 480,
									"nodeType": "InheritanceSpecifier",
									"src": "814:8:6"
								},
								{
									"baseName": {
										"id": 481,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"824:15:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 468,
										"src": "824:15:6"
									},
									"id": 482,
									"nodeType": "InheritanceSpecifier",
									"src": "824:15:6"
								}
							],
							"canonicalName": "PermitAutoBuyContract",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 476,
								"nodeType": "StructuredDocumentation",
								"src": "355:415:6",
								"text": " @title PermitAutoBuyContract\n @dev Contract that accepts EIP-2612 permits and executes swaps atomically\n \n Users grant permits to this contract, then the contract:\n 1. Uses permit to transfer USDC from user\n 2. Approves DEX router for USDC spending\n 3. Executes swap via router\n 4. Sends received tokens directly to user\n \n This eliminates the need for backend wallet to hold user funds"
							},
							"fullyImplemented": true,
							"id": 858,
							"linearizedBaseContracts": [
								858,
								468,
								399,
								147,
								291
							],
							"name": "PermitAutoBuyContract",
							"nameLocation": "780:21:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "3e413bee",
									"id": 485,
									"mutability": "immutable",
									"name": "usdc",
									"nameLocation": "875:4:6",
									"nodeType": "VariableDeclaration",
									"scope": 858,
									"src": "851:28:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$225",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 484,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 483,
											"name": "IERC20",
											"nameLocations": [
												"851:6:6"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 225,
											"src": "851:6:6"
										},
										"referencedDeclaration": 225,
										"src": "851:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$225",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "70a48572",
									"id": 488,
									"mutability": "constant",
									"name": "KYBERSWAP_ROUTER",
									"nameLocation": "941:16:6",
									"nodeType": "VariableDeclaration",
									"scope": 858,
									"src": "917:85:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 486,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "917:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307836313331423566616531394541346639443936346541633034303845343430386236363333376235",
										"id": 487,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "960:42:6",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9061a57f",
									"id": 494,
									"mutability": "mutable",
									"name": "dailySpent",
									"nameLocation": "1104:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 858,
									"src": "1049:65:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(uint256 => uint256))"
									},
									"typeName": {
										"id": 493,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 489,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1057:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1049:47:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(uint256 => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 492,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 490,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1076:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1068:27:6",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
												"typeString": "mapping(uint256 => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 491,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1087:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3113e93c",
									"id": 498,
									"mutability": "mutable",
									"name": "userDailyLimit",
									"nameLocation": "1180:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 858,
									"src": "1145:49:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 497,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 495,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1153:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1145:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 496,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1164:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "231534d7",
									"id": 502,
									"mutability": "mutable",
									"name": "likeAmount",
									"nameLocation": "1235:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 858,
									"src": "1200:45:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 501,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 499,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1208:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1200:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 500,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1219:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0247f437",
									"id": 506,
									"mutability": "mutable",
									"name": "recastAmount",
									"nameLocation": "1286:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 858,
									"src": "1251:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 505,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 503,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1259:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1251:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 504,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1270:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "db2f68abe9707696a4a1b20d3ad43e58cbbc37bf47b36c8b0b70e4a0291a30c6",
									"id": 518,
									"name": "PermitAutoBuyExecuted",
									"nameLocation": "1329:21:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 508,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1376:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1360:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 507,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1360:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenOut",
												"nameLocation": "1406:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1390:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1390:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"indexed": false,
												"mutability": "mutable",
												"name": "usdcAmount",
												"nameLocation": "1432:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1424:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokensReceived",
												"nameLocation": "1460:14:6",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1452:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"indexed": false,
												"mutability": "mutable",
												"name": "actionType",
												"nameLocation": "1491:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1484:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 515,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1484:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1350:157:6"
									},
									"src": "1323:185:6"
								},
								{
									"anonymous": false,
									"eventSelector": "01d994bbbeefa5b75b8ca7fdc56d35809c6916ffbf520f22ccb028e4740f198d",
									"id": 528,
									"name": "UserLimitsSet",
									"nameLocation": "1524:13:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 520,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1563:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "1547:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"indexed": false,
												"mutability": "mutable",
												"name": "dailyLimit",
												"nameLocation": "1585:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "1577:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"indexed": false,
												"mutability": "mutable",
												"name": "likeAmount",
												"nameLocation": "1613:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "1605:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1605:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"indexed": false,
												"mutability": "mutable",
												"name": "recastAmount",
												"nameLocation": "1641:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "1633:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 525,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1633:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1537:122:6"
									},
									"src": "1518:142:6"
								},
								{
									"body": {
										"id": 544,
										"nodeType": "Block",
										"src": "1727:37:6",
										"statements": [
											{
												"expression": {
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 538,
														"name": "usdc",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 485,
														"src": "1737:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$225",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 540,
																"name": "_usdc",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 530,
																"src": "1751:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 539,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 225,
															"src": "1744:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$225_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 541,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1744:13:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$225",
															"typeString": "contract IERC20"
														}
													},
													"src": "1737:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$225",
														"typeString": "contract IERC20"
													}
												},
												"id": 543,
												"nodeType": "ExpressionStatement",
												"src": "1737:20:6"
											}
										]
									},
									"id": 545,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 535,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 532,
													"src": "1720:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 536,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 534,
												"name": "Ownable",
												"nameLocations": [
													"1712:7:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "1712:7:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:14:6"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "_usdc",
												"nameLocation": "1690:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "1682:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1682:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1705:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "1697:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1697:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1681:30:6"
									},
									"returnParameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1727:0:6"
									},
									"scope": 858,
									"src": "1670:94:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "2412:2238:6",
										"statements": [
											{
												"assignments": [
													572
												],
												"declarations": [
													{
														"constant": false,
														"id": 572,
														"mutability": "mutable",
														"name": "today",
														"nameLocation": "2489:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "2481:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 571,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2481:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 577,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 573,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2497:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2503:9:6",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "2497:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3836343030",
														"id": 575,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2515:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_86400_by_1",
															"typeString": "int_const 86400"
														},
														"value": "86400"
													},
													"src": "2497:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2481:39:6"
											},
											{
												"assignments": [
													579
												],
												"declarations": [
													{
														"constant": false,
														"id": 579,
														"mutability": "mutable",
														"name": "maxAmount",
														"nameLocation": "2558:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "2550:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 578,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2550:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 580,
												"nodeType": "VariableDeclarationStatement",
												"src": "2550:17:6"
											},
											{
												"assignments": [
													582
												],
												"declarations": [
													{
														"constant": false,
														"id": 582,
														"mutability": "mutable",
														"name": "actionHash",
														"nameLocation": "2594:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "2586:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 581,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2586:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 589,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 586,
																	"name": "actionType",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 562,
																	"src": "2623:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_calldata_ptr",
																		"typeString": "string calldata"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_calldata_ptr",
																		"typeString": "string calldata"
																	}
																],
																"id": 585,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2617:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 584,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2617:5:6",
																	"typeDescriptions": {}
																}
															},
															"id": 587,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2617:17:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 583,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2607:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2586:49:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 590,
														"name": "actionHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 582,
														"src": "2649:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"hexValue": "6c696b65",
																		"id": 594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2679:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_16a69a64601e323737c13af3e3dd037eca589d19787dde3fb106c4d760353fed",
																			"typeString": "literal_string \"like\""
																		},
																		"value": "like"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_16a69a64601e323737c13af3e3dd037eca589d19787dde3fb106c4d760353fed",
																			"typeString": "literal_string \"like\""
																		}
																	],
																	"id": 593,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2673:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 592,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2673:5:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 595,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2673:13:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 591,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2663:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 596,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2663:24:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2649:38:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 614,
															"name": "actionHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "2818:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"hexValue": "726563617374",
																			"id": 618,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2848:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_c90dfe1fbd3f0111cfab07a6d7bf7e23649cceb255a95608939480612cb6e7d8",
																				"typeString": "literal_string \"recast\""
																			},
																			"value": "recast"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c90dfe1fbd3f0111cfab07a6d7bf7e23649cceb255a95608939480612cb6e7d8",
																				"typeString": "literal_string \"recast\""
																			}
																		],
																		"id": 617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2842:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 616,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2842:5:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 619,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2842:15:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 615,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "2832:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2832:26:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "2818:40:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 642,
														"nodeType": "Block",
														"src": "2991:54:6",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "496e76616c696420616374696f6e2074797065",
																			"id": 639,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3012:21:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_07d737c46e9b9c99e1f7ddb7351ed92a72a66a7380329f7025d4374f53ae4ac6",
																				"typeString": "literal_string \"Invalid action type\""
																			},
																			"value": "Invalid action type"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_07d737c46e9b9c99e1f7ddb7351ed92a72a66a7380329f7025d4374f53ae4ac6",
																				"typeString": "literal_string \"Invalid action type\""
																			}
																		],
																		"id": 638,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "3005:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 640,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3005:29:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 641,
																"nodeType": "ExpressionStatement",
																"src": "3005:29:6"
															}
														]
													},
													"id": 643,
													"nodeType": "IfStatement",
													"src": "2814:231:6",
													"trueBody": {
														"id": 637,
														"nodeType": "Block",
														"src": "2860:125:6",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 627,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"baseExpression": {
																					"id": 623,
																					"name": "recastAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 506,
																					"src": "2882:12:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 625,
																				"indexExpression": {
																					"id": 624,
																					"name": "user",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 548,
																					"src": "2895:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2882:18:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 626,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2903:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2882:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		{
																			"hexValue": "52656361737420616d6f756e74206e6f7420736574",
																			"id": 628,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2906:23:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_f718d551a3beaf98b0033dc63780512cdacd9921975307d511c4068d7859b333",
																				"typeString": "literal_string \"Recast amount not set\""
																			},
																			"value": "Recast amount not set"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			{
																				"typeIdentifier": "t_stringliteral_f718d551a3beaf98b0033dc63780512cdacd9921975307d511c4068d7859b333",
																				"typeString": "literal_string \"Recast amount not set\""
																			}
																		],
																		"id": 622,
																		"name": "require",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967278,
																			4294967278,
																			4294967278
																		],
																		"referencedDeclaration": 4294967278,
																		"src": "2874:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (bool,string memory) pure"
																		}
																	},
																	"id": 629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2874:56:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 630,
																"nodeType": "ExpressionStatement",
																"src": "2874:56:6"
															},
															{
																"expression": {
																	"id": 635,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 631,
																		"name": "maxAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 579,
																		"src": "2944:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"baseExpression": {
																			"id": 632,
																			"name": "recastAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 506,
																			"src": "2956:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 634,
																		"indexExpression": {
																			"id": 633,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 548,
																			"src": "2969:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2956:18:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2944:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 636,
																"nodeType": "ExpressionStatement",
																"src": "2944:30:6"
															}
														]
													}
												},
												"id": 644,
												"nodeType": "IfStatement",
												"src": "2645:400:6",
												"trueBody": {
													"id": 613,
													"nodeType": "Block",
													"src": "2689:119:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 599,
																				"name": "likeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 502,
																				"src": "2711:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 601,
																			"indexExpression": {
																				"id": 600,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 548,
																				"src": "2722:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2711:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 602,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2730:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2711:20:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4c696b6520616d6f756e74206e6f7420736574",
																		"id": 604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2733:21:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_8604d408a8be66faf5ca9ed93c2a6aa96db322b720d829b3d722356e8191c86c",
																			"typeString": "literal_string \"Like amount not set\""
																		},
																		"value": "Like amount not set"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_8604d408a8be66faf5ca9ed93c2a6aa96db322b720d829b3d722356e8191c86c",
																			"typeString": "literal_string \"Like amount not set\""
																		}
																	],
																	"id": 598,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2703:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2703:52:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 606,
															"nodeType": "ExpressionStatement",
															"src": "2703:52:6"
														},
														{
															"expression": {
																"id": 611,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 607,
																	"name": "maxAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 579,
																	"src": "2769:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 608,
																		"name": "likeAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 502,
																		"src": "2781:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 610,
																	"indexExpression": {
																		"id": 609,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 548,
																		"src": "2792:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2781:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2769:28:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 612,
															"nodeType": "ExpressionStatement",
															"src": "2769:28:6"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 648,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 646,
																"name": "usdcAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 550,
																"src": "3071:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 647,
																"name": "maxAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 579,
																"src": "3085:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3071:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416d6f756e74206578636565647320616374696f6e206c696d6974",
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3096:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d915953ebff8e3c30b36b863681bb05de02f40fab51895d0460961f3f1fc789f",
																"typeString": "literal_string \"Amount exceeds action limit\""
															},
															"value": "Amount exceeds action limit"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d915953ebff8e3c30b36b863681bb05de02f40fab51895d0460961f3f1fc789f",
																"typeString": "literal_string \"Amount exceeds action limit\""
															}
														],
														"id": 645,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3063:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3063:63:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 651,
												"nodeType": "ExpressionStatement",
												"src": "3063:63:6"
											},
											{
												"assignments": [
													653
												],
												"declarations": [
													{
														"constant": false,
														"id": 653,
														"mutability": "mutable",
														"name": "limit",
														"nameLocation": "3182:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "3174:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 652,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3174:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 657,
												"initialValue": {
													"baseExpression": {
														"id": 654,
														"name": "userDailyLimit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 498,
														"src": "3190:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 656,
													"indexExpression": {
														"id": 655,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "3205:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3190:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3174:36:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 659,
																"name": "limit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 653,
																"src": "3228:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 660,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3236:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3228:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4461696c79206c696d6974206e6f7420736574",
															"id": 662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3239:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f46a208452d481cbabd737d10144d3db436474a848cac326801210ec7a5aad99",
																"typeString": "literal_string \"Daily limit not set\""
															},
															"value": "Daily limit not set"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f46a208452d481cbabd737d10144d3db436474a848cac326801210ec7a5aad99",
																"typeString": "literal_string \"Daily limit not set\""
															}
														],
														"id": 658,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3220:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3220:41:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 664,
												"nodeType": "ExpressionStatement",
												"src": "3220:41:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 666,
																			"name": "dailySpent",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 494,
																			"src": "3279:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(uint256 => uint256))"
																			}
																		},
																		"id": 668,
																		"indexExpression": {
																			"id": 667,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 548,
																			"src": "3290:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3279:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 670,
																	"indexExpression": {
																		"id": 669,
																		"name": "today",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 572,
																		"src": "3296:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3279:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 671,
																	"name": "usdcAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 550,
																	"src": "3305:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3279:36:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 673,
																"name": "limit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 653,
																"src": "3319:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3279:45:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4461696c79206c696d6974206578636565646564",
															"id": 675,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3326:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9bd082070ed48a1e99c071ec57b5f5993b2d28da31c806020b82e5de524c8f1c",
																"typeString": "literal_string \"Daily limit exceeded\""
															},
															"value": "Daily limit exceeded"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9bd082070ed48a1e99c071ec57b5f5993b2d28da31c806020b82e5de524c8f1c",
																"typeString": "literal_string \"Daily limit exceeded\""
															}
														],
														"id": 665,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3271:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3271:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 677,
												"nodeType": "ExpressionStatement",
												"src": "3271:78:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 685,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 548,
															"src": "3486:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 688,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3512:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PermitAutoBuyContract_$858",
																		"typeString": "contract PermitAutoBuyContract"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PermitAutoBuyContract_$858",
																		"typeString": "contract PermitAutoBuyContract"
																	}
																],
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3504:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 686,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3504:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3504:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 690,
															"name": "usdcAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 550,
															"src": "3531:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 691,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "3555:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 692,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "3577:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 693,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "3592:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 694,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "3607:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 681,
																			"name": "usdc",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 485,
																			"src": "3459:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$225",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$225",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 680,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3451:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 679,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3451:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 682,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3451:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 678,
																"name": "IERC20Permit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 261,
																"src": "3438:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Permit_$261_$",
																	"typeString": "type(contract IERC20Permit)"
																}
															},
															"id": 683,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3438:27:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$261",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3466:6:6",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 246,
														"src": "3438:34:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3438:180:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 696,
												"nodeType": "ExpressionStatement",
												"src": "3438:180:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 700,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 548,
																	"src": "3728:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 703,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3742:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_PermitAutoBuyContract_$858",
																				"typeString": "contract PermitAutoBuyContract"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_PermitAutoBuyContract_$858",
																				"typeString": "contract PermitAutoBuyContract"
																			}
																		],
																		"id": 702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3734:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 701,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3734:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 704,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3734:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 705,
																	"name": "usdcAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 550,
																	"src": "3749:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 698,
																	"name": "usdc",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 485,
																	"src": "3710:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$225",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 699,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3715:12:6",
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 224,
																"src": "3710:17:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3710:50:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "55534443207472616e73666572206661696c6564",
															"id": 707,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3774:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_032fb3428477d66798bdf7801f58a252d723dc1362b9dfac5726f85f81cca815",
																"typeString": "literal_string \"USDC transfer failed\""
															},
															"value": "USDC transfer failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_032fb3428477d66798bdf7801f58a252d723dc1362b9dfac5726f85f81cca815",
																"typeString": "literal_string \"USDC transfer failed\""
															}
														],
														"id": 697,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3689:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3689:117:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 709,
												"nodeType": "ExpressionStatement",
												"src": "3689:117:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 713,
																	"name": "KYBERSWAP_ROUTER",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 488,
																	"src": "3899:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 714,
																	"name": "usdcAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 550,
																	"src": "3917:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 711,
																	"name": "usdc",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 485,
																	"src": "3886:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$225",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 712,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3891:7:6",
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 212,
																"src": "3886:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 715,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3886:42:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526f7574657220617070726f76616c206661696c6564",
															"id": 716,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3942:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e5c7dc81e044bdf4ad1b27b1253377e68c3540a09bc2cfc59b4e92d8b4b1c3c9",
																"typeString": "literal_string \"Router approval failed\""
															},
															"value": "Router approval failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e5c7dc81e044bdf4ad1b27b1253377e68c3540a09bc2cfc59b4e92d8b4b1c3c9",
																"typeString": "literal_string \"Router approval failed\""
															}
														],
														"id": 710,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3865:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3865:111:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 718,
												"nodeType": "ExpressionStatement",
												"src": "3865:111:6"
											},
											{
												"assignments": [
													720,
													722
												],
												"declarations": [
													{
														"constant": false,
														"id": 720,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4036:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "4031:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 719,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4031:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 722,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "4058:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "4045:19:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 721,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4045:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 727,
												"initialValue": {
													"arguments": [
														{
															"id": 725,
															"name": "swapData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "4090:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"expression": {
															"id": 723,
															"name": "KYBERSWAP_ROUTER",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "4068:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 724,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4085:4:6",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "4068:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4068:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4030:69:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 729,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "4117:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [
																{
																	"id": 732,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 722,
																	"src": "4133:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 731,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4126:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																	"typeString": "type(string storage pointer)"
																},
																"typeName": {
																	"id": 730,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "4126:6:6",
																	"typeDescriptions": {}
																}
															},
															"id": 733,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4126:14:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 728,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4109:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 734,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4109:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 735,
												"nodeType": "ExpressionStatement",
												"src": "4109:32:6"
											},
											{
												"expression": {
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 736,
																"name": "dailySpent",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 494,
																"src": "4193:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 739,
															"indexExpression": {
																"id": 737,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 548,
																"src": "4204:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4193:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 740,
														"indexExpression": {
															"id": 738,
															"name": "today",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 572,
															"src": "4210:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4193:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 741,
														"name": "usdcAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 550,
														"src": "4220:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4193:37:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 743,
												"nodeType": "ExpressionStatement",
												"src": "4193:37:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 745,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 548,
															"src": "4447:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4473:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 747,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4465:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 746,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4465:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 749,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4465:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 750,
															"name": "usdcAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 550,
															"src": "4545:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 751,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4569:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 752,
															"name": "actionType",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "4623:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														],
														"id": 744,
														"name": "PermitAutoBuyExecuted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 518,
														"src": "4412:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,string memory)"
														}
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4412:231:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 754,
												"nodeType": "EmitStatement",
												"src": "4407:236:6"
											}
										]
									},
									"documentation": {
										"id": 546,
										"nodeType": "StructuredDocumentation",
										"src": "1774:351:6",
										"text": " @dev Execute auto-buy using EIP-2612 permit\n @param user User's wallet address\n @param usdcAmount Amount of USDC to spend\n @param deadline Permit deadline\n @param v,r,s Permit signature components\n @param swapData Encoded swap transaction data for DEX router\n @param actionType \"like\" or \"recast\""
									},
									"functionSelector": "958e7387",
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 565,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 564,
												"name": "onlyOwner",
												"nameLocations": [
													"2375:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2375:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2375:9:6"
										},
										{
											"id": 567,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 566,
												"name": "whenNotPaused",
												"nameLocations": [
													"2385:13:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 324,
												"src": "2385:13:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2385:13:6"
										},
										{
											"id": 569,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 568,
												"name": "nonReentrant",
												"nameLocations": [
													"2399:12:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 432,
												"src": "2399:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2399:12:6"
										}
									],
									"name": "executePermitAutoBuy",
									"nameLocation": "2139:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2177:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2169:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 547,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2169:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "usdcAmount",
												"nameLocation": "2199:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2191:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 549,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2191:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2227:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2219:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 551,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2219:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2251:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2245:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 553,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2245:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2270:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2262:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 555,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2262:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2289:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2281:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 557,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2281:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "swapData",
												"nameLocation": "2315:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2300:23:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2300:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "actionType",
												"nameLocation": "2349:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2333:26:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 561,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2333:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2159:206:6"
									},
									"returnParameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2412:0:6"
									},
									"scope": 858,
									"src": "2130:2520:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 795,
										"nodeType": "Block",
										"src": "4874:217:6",
										"statements": [
											{
												"expression": {
													"id": 774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 770,
															"name": "userDailyLimit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 498,
															"src": "4884:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 772,
														"indexExpression": {
															"id": 771,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "4899:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4884:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 773,
														"name": "dailyLimit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "4907:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4884:33:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 775,
												"nodeType": "ExpressionStatement",
												"src": "4884:33:6"
											},
											{
												"expression": {
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 776,
															"name": "likeAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 502,
															"src": "4927:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 778,
														"indexExpression": {
															"id": 777,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "4938:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4927:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 779,
														"name": "_likeAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "4946:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4927:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 781,
												"nodeType": "ExpressionStatement",
												"src": "4927:30:6"
											},
											{
												"expression": {
													"id": 786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 782,
															"name": "recastAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 506,
															"src": "4967:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 784,
														"indexExpression": {
															"id": 783,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "4980:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4967:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 785,
														"name": "_recastAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "4988:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4967:34:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 787,
												"nodeType": "ExpressionStatement",
												"src": "4967:34:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 789,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "5039:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 790,
															"name": "dailyLimit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "5045:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 791,
															"name": "_likeAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 763,
															"src": "5057:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 792,
															"name": "_recastAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "5070:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 788,
														"name": "UserLimitsSet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 528,
														"src": "5025:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5025:59:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 794,
												"nodeType": "EmitStatement",
												"src": "5020:64:6"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "4660:51:6",
										"text": " @dev Set user limits and amounts"
									},
									"functionSelector": "d34ac1c3",
									"id": 796,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 768,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 767,
												"name": "onlyOwner",
												"nameLocations": [
													"4864:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "4864:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4864:9:6"
										}
									],
									"name": "setUserLimits",
									"nameLocation": "4725:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4756:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "4748:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4748:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "dailyLimit",
												"nameLocation": "4778:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "4770:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4770:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "_likeAmount",
												"nameLocation": "4806:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "4798:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "_recastAmount",
												"nameLocation": "4835:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "4827:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4827:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4738:116:6"
									},
									"returnParameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4874:0:6"
									},
									"scope": 858,
									"src": "4716:375:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 817,
										"nodeType": "Block",
										"src": "5229:96:6",
										"statements": [
											{
												"assignments": [
													805
												],
												"declarations": [
													{
														"constant": false,
														"id": 805,
														"mutability": "mutable",
														"name": "today",
														"nameLocation": "5247:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 817,
														"src": "5239:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 804,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5239:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 810,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 806,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "5255:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 807,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5261:9:6",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "5255:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3836343030",
														"id": 808,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5273:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_86400_by_1",
															"typeString": "int_const 86400"
														},
														"value": "86400"
													},
													"src": "5255:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5239:39:6"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 811,
															"name": "dailySpent",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "5295:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(uint256 => uint256))"
															}
														},
														"id": 813,
														"indexExpression": {
															"id": 812,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "5306:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5295:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 815,
													"indexExpression": {
														"id": 814,
														"name": "today",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 805,
														"src": "5312:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5295:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 803,
												"id": 816,
												"nodeType": "Return",
												"src": "5288:30:6"
											}
										]
									},
									"documentation": {
										"id": 797,
										"nodeType": "StructuredDocumentation",
										"src": "5101:54:6",
										"text": " @dev Get current daily spent amount"
									},
									"functionSelector": "5b8c9337",
									"id": 818,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getDailySpent",
									"nameLocation": "5169:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "5191:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "5183:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 798,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5183:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5182:14:6"
									},
									"returnParameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "5220:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5220:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5219:9:6"
									},
									"scope": 858,
									"src": "5160:165:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 827,
										"nodeType": "Block",
										"src": "5419:25:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 824,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 382,
														"src": "5429:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5429:8:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 826,
												"nodeType": "ExpressionStatement",
												"src": "5429:8:6"
											}
										]
									},
									"documentation": {
										"id": 819,
										"nodeType": "StructuredDocumentation",
										"src": "5335:43:6",
										"text": " @dev Emergency functions"
									},
									"functionSelector": "8456cb59",
									"id": 828,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 822,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 821,
												"name": "onlyOwner",
												"nameLocations": [
													"5409:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "5409:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "5409:9:6"
										}
									],
									"name": "pause",
									"nameLocation": "5392:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5397:2:6"
									},
									"returnParameters": {
										"id": 823,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5419:0:6"
									},
									"scope": 858,
									"src": "5383:61:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 836,
										"nodeType": "Block",
										"src": "5492:27:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 833,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "5502:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5502:10:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 835,
												"nodeType": "ExpressionStatement",
												"src": "5502:10:6"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 837,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 831,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 830,
												"name": "onlyOwner",
												"nameLocations": [
													"5482:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "5482:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "5482:9:6"
										}
									],
									"name": "unpause",
									"nameLocation": "5463:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5470:2:6"
									},
									"returnParameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5492:0:6"
									},
									"scope": 858,
									"src": "5454:65:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 856,
										"nodeType": "Block",
										"src": "5659:56:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 851,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "5692:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5692:7:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 853,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 842,
															"src": "5701:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 848,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 840,
																	"src": "5676:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 847,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 225,
																"src": "5669:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$225_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 849,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5669:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$225",
																"typeString": "contract IERC20"
															}
														},
														"id": 850,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5683:8:6",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 192,
														"src": "5669:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5669:39:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 855,
												"nodeType": "ExpressionStatement",
												"src": "5669:39:6"
											}
										]
									},
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "5529:48:6",
										"text": " @dev Emergency token recovery"
									},
									"functionSelector": "727b7acf",
									"id": 857,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 845,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 844,
												"name": "onlyOwner",
												"nameLocations": [
													"5649:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "5649:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "5649:9:6"
										}
									],
									"name": "emergencyRecovery",
									"nameLocation": "5591:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5617:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "5609:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5609:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5632:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "5624:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5624:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5608:31:6"
									},
									"returnParameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5659:0:6"
									},
									"scope": 858,
									"src": "5582:133:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 859,
							"src": "771:4946:6",
							"usedErrors": [
								13,
								18,
								313,
								316,
								413
							],
							"usedEvents": [
								24,
								305,
								310,
								518,
								528
							]
						}
					],
					"src": "32:5686:6"
				},
				"id": 6
			}
		}
	}
}